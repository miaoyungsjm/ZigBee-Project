###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         13/Jun/2017  13:25:12 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          Source\SampleApp.c                                 #
#    Command line       =  -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFAA                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\Source\SampleApp.c -D       #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\f #
#                          inal\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\ #
#                           -lA D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ #
#                          ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB\List\ --diag_suppress    #
#                          Pe001,Pa010 -o D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú #
#                          1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö» #
#                          ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\Source\ -I             #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\hal\include\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\hal\target\C #
#                          C2530EB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8 #
#                          ¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\mac #
#                          \include\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\ #
#                          8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\high_level\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö #
#                          »ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\ -I                          #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\mac\low_level\s #
#                          rf04\single_chip\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fina #
#                          l\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mt\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\ #
#                          8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\Components\os #
#                          al\include\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú #
#                          1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\ #
#                          ·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\services\sdata\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\af\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fina #
#                          l\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\nwk\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final #
#                          \·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sapi\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final #
#                          \·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sec\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\ #
#                          ·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\· #
#                          Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö #
#                          »ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡ #
#                          ¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\zmac #
#                          \f8w\ -Ohz --require_prototypes                    #
#    List file          =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\EndDeviceEB\List\SampleApp.lst            #
#    Object file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\EndDeviceEB\Obj\SampleApp.r51             #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú1\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT.h"
     77          
     78          //Ìí¼Ó LED2 µÄÍ·ÎÄ¼þ
     79          #include  "LED.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135                                    // This variable will be received when
    136                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          
    144          //µã¶ÔµãµØÖ·

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t Point_to_Point;
   \                     Point_to_Point:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTIONS
    155           */
    156          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    157          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    158          void SampleApp_SendPeriodicMessage( void );
    159          void SampleApp_SendFlashMessage( uint16 flashTime );
    160          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    161          
    162          /*********************************************************************
    163           * NETWORK LAYER CALLBACKS
    164           */
    165          
    166          /*********************************************************************
    167           * PUBLIC FUNCTIONS
    168           */
    169          
    170          /*********************************************************************
    171           * @fn      SampleApp_Init
    172           *
    173           * @brief   Initialization function for the Generic App Task.
    174           *          This is called during initialization and should contain
    175           *          any application specific initialization (ie. hardware
    176           *          initialization/setup, table initialization, power up
    177           *          notificaiton ... ).
    178           *
    179           * @param   task_id - the ID assigned by OSAL.  This ID should be
    180           *                    used to send messages and set timers.
    181           *
    182           * @return  none
    183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    185          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    186            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    187            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    188            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    189            
    190            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    191            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    192            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    193            
    194            LED_Initial();// LED ³õÊ¼»¯
   \   00002B                ; Setup parameters for call to function LED_Initial
   \   00002B   12....       LCALL   ??LED_Initial?relay
    195            
    196            // Device hardware initialization can be added here or in main() (Zmain.c).
    197            // If the hardware is application specific - add it here.
    198            // If the hardware is other parts of the device add it in main().
    199          
    200           #if defined ( BUILD_ALL_DEVICES )
    201            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    202            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    203            // together - if they are - we will start up a coordinator. Otherwise,
    204            // the device will start as a router.
    205            if ( readCoordinatorJumper() )
    206              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    207            else
    208              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    209          #endif // BUILD_ALL_DEVICES
    210          
    211          #if defined ( HOLD_AUTO_START )
    212            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    213            //  from starting the device and wait for the application to
    214            //  start the device.
    215            ZDOInitDevice(0);
    216          #endif
    217          
    218            // Setup for the periodic message's destination address
    219            // Broadcast to everyone
    220            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000031   740F         MOV     A,#0xf
   \   000033   F0           MOVX    @DPTR,A
    221            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000034   A3           INC     DPTR
   \   000035   7414         MOV     A,#0x14
   \   000037   F0           MOVX    @DPTR,A
    222            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    223          
    224            // Setup for the flash command's destination address - Group 1
    225            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    226            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    227            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    228            
    229            // ÉèÖÃµã¶ÔµãµÄ·¢ËÍÄ£Ê½
    230            Point_to_Point.addrMode = (afAddrMode_t)Addr16Bit;
   \   000053   90....       MOV     DPTR,#Point_to_Point + 8
   \   000056   7402         MOV     A,#0x2
   \   000058   F0           MOVX    @DPTR,A
    231            Point_to_Point.endPoint = SAMPLEAPP_ENDPOINT;
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    232            //Point_to_Point.addr.shortAddr = 0x????;
    233          
    234            // Fill out the endpoint description.
    235            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005D   90....       MOV     DPTR,#SampleApp_epDesc
   \   000060   F0           MOVX    @DPTR,A
    236            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000068   F0           MOVX    @DPTR,A
    237            SampleApp_epDesc.simpleDesc
    238                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000070   F0           MOVX    @DPTR,A
    239            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    240          
    241            // Register the endpoint description with the AF
    242            afRegister( &SampleApp_epDesc );
   \   000074                ; Setup parameters for call to function afRegister
   \   000074   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000076   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000078   12....       LCALL   ??afRegister?relay
    243          
    244            // Register for all key events - This app will handle all key events
    245            RegisterForKeys( SampleApp_TaskID );
   \   00007B                ; Setup parameters for call to function RegisterForKeys
   \   00007B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ??RegisterForKeys?relay
    246          
    247            // By default, all devices start out in Group 1
    248            SampleApp_Group.ID = 0x0001;
   \   000083   90....       MOV     DPTR,#SampleApp_Group
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
    249            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008F   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000092   F5..         MOV     ?V0 + 2,A
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000099   7C07         MOV     R4,#0x7
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009F   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A1   12....       LCALL   ??osal_memcpy?relay
   \   0000A4   7403         MOV     A,#0x3
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    250            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A9                ; Setup parameters for call to function aps_AddGroup
   \   0000A9   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AB   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AD   7914         MOV     R1,#0x14
   \   0000AF   12....       LCALL   ??aps_AddGroup?relay
    251          
    252          #if defined ( LCD_SUPPORTED )
    253            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B2                ; Setup parameters for call to function HalLcdWriteString
   \   0000B2   7901         MOV     R1,#0x1
   \   0000B4   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B6   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B8   12....       LCALL   ??HalLcdWriteString?relay
    254          #endif
    255          }
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    256          
    257          /*********************************************************************
    258           * @fn      SampleApp_ProcessEvent
    259           *
    260           * @brief   Generic Application Task event processor.  This function
    261           *          is called to process all events for the task.  Events
    262           *          include timers, messages and any other user defined events.
    263           *
    264           * @param   task_id  - The OSAL assigned task ID.
    265           * @param   events - events to process.  This is a bit map and can
    266           *                   contain more than one event.
    267           *
    268           * @return  none
    269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    270          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    271          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    272            afIncomingMSGPacket_t *MSGpkt;
    273            (void)task_id;  // Intentionally unreferenced parameter
    274          
    275            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    276            {
    277              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   802B         SJMP    ??SampleApp_ProcessEvent_1
    278              while ( MSGpkt )
    279              {
    280                switch ( MSGpkt->hdr.event )
    281                {
    282                  case CMD_SERIAL_MSG:  //´®¿ÚÊÕµ½Êý¾ÝºóÓÉMT_UART²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬ÓÃÍø·ä·½·¨½ÓÊÕ£¬±àÒëÊ±²»¶¨ÒåMTÏà¹ØÄÚÈÝ 
    283                   SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    284                   break;
    285          
    286                  // Received when a key is pressed
    287                    case KEY_CHANGE:
    288                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    289                    break;
    290          
    291                  // Received when a messages is received (OTA) for this endpoint
    292                  case AF_INCOMING_MSG_CMD:
    293                    SampleApp_MessageMSGCB( MSGpkt );
    294                    break;
    295          
    296                  // Received whenever the device changes state in the network
    297                  case ZDO_STATE_CHANGE:
    298                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    299                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    300                        || (SampleApp_NwkState == DEV_ROUTER)
    301                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6409         XRL     A,#0x9
   \   00001A   600A         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6407         XRL     A,#0x7
   \   00001F   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6406         XRL     A,#0x6
   \   000024   7010         JNZ     ??SampleApp_ProcessEvent_4
    302                    {
    303                      // Start sending the periodic message in a regular interval.
    304                      osal_start_timerEx( SampleApp_TaskID,
    305                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    306                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7C88         MOV     R4,#-0x78
   \   000028   7D13         MOV     R5,#0x13
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay
    307                    }
    308                    else
    309                    {
    310                      // Device is no longer in the network
    311                    }
    312                    break;
    313          
    314                  default:
    315                    break;
    316                }
    317          
    318                // Release the memory
    319                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    320          
    321                // Next - if one is available
    322                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   603E         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   14           DEC     A
   \   000057   600E         JZ      ??SampleApp_ProcessEvent_6
   \   000059   24E7         ADD     A,#-0x19
   \   00005B   6027         JZ      ??SampleApp_ProcessEvent_7
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   600F         JZ      ??SampleApp_ProcessEvent_8
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AD         JZ      ??SampleApp_ProcessEvent_2
   \   000065   80CF         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000067                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_SerialCMD?relay
   \   00006E   80C6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000070                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000082   80B2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000084                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
   \   000088   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00008B   80A9         SJMP    ??SampleApp_ProcessEvent_4
    323              }
    324          
    325              // return unprocessed events
    326              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   000092   FB           MOV     R3,A
   \   000093   802A         SJMP    ??SampleApp_ProcessEvent_10
    327            }
    328          
    329            // Send a message out - This event is generated by a timer
    330            //  (setup in SampleApp_Init()).
    331            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000095   EE           MOV     A,R6
   \   000096   A2E0         MOV     C,0xE0 /* A   */.0
   \   000098   5021         JNC     ??SampleApp_ProcessEvent_11
    332            {
    333              // Send the periodic message
    334              SampleApp_SendPeriodicMessage();
   \   00009A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    335          
    336              // Setup to send message again in normal period (+ a little jitter)
    337              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    338                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00009D                ; Setup parameters for call to function osal_rand
   \   00009D   12....       LCALL   ??osal_rand?relay
   \   0000A0                ; Setup parameters for call to function osal_start_timerEx
   \   0000A0   EA           MOV     A,R2
   \   0000A1   2488         ADD     A,#-0x78
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   3413         ADDC    A,#0x13
   \   0000A7   FD           MOV     R5,A
   \   0000A8   7A01         MOV     R2,#0x1
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??osal_start_timerEx?relay
    339          
    340              // return unprocessed events
    341              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000B4   EE           MOV     A,R6
   \   0000B5   6401         XRL     A,#0x1
   \   0000B7   FA           MOV     R2,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   80D7         SJMP    ??SampleApp_ProcessEvent_9
    342            }
    343          
    344            // Discard unknown events
    345            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BF   7F04         MOV     R7,#0x4
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    346          }
    347          
    348          /*********************************************************************
    349           * Event Generation Functions
    350           */
    351          /*********************************************************************
    352           * @fn      SampleApp_HandleKeys
    353           *
    354           * @brief   Handles all key events for this device.
    355           *
    356           * @param   shift - true if in shift/alt.
    357           * @param   keys - bit field for key events. Valid entries:
    358           *                 HAL_KEY_SW_2
    359           *                 HAL_KEY_SW_1
    360           *
    361           * @return  none
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    364          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    365            (void)shift;  // Intentionally unreferenced parameter
    366            
    367            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    368            {
    369              /* This key sends the Flash Command is sent to Group 1.
    370               * This device will not receive the Flash Command from this
    371               * device (even if it belongs to group 1).
    372               */
    373              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    374            }
    375          
    376            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    377            {
    378              /* The Flashr Command is sent to Group 1.
    379               * This key toggles this device in and out of group 1.
    380               * If this device doesn't belong to group 1, this application
    381               * will not receive the Flash command sent to group 1.
    382               */
    383              aps_Group_t *grp;
    384              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    385              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    386              {
    387                // Remove from the group
    388                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    389              }
    390              else
    391              {
    392                // Add to the flash group
    393                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    394              }
    395            }
    396          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine8_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    397          
    398          /*********************************************************************
    399           * LOCAL FUNCTIONS
    400           */
    401          
    402          /*********************************************************************
    403           * @fn      SampleApp_MessageMSGCB
    404           *
    405           * @brief   Data message processor callback.  This function processes
    406           *          any incoming data - probably from other devices.  So, based
    407           *          on cluster ID, perform the intended action.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    414          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    415            uint16 flashTime;
                          ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    416            uint8 ascii[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` & 0xff
   \   00001D   7410         MOV     A,#0x10
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    417            uint8 temp[4];
    418            
    419            switch ( pkt->clusterId )
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6403         XRL     A,#0x3
   \   00002D   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000031   6003         JZ      $+5
   \   000033   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    420            {
    421               uint8 i,len;
    422               case SAMPLEAPP_COM_CLUSTERID:     //Èç¹ûÊÇ´®¿ÚÍ¸´«µÄÐÅÏ¢
    423                len=pkt->cmd.Data[0];
   \   000036   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 1,A
    424                for(i=0;i<len;i++)
   \   00003C   75..00       MOV     ?V0 + 0,#0x0
   \   00003F   801B         SJMP    ??SampleApp_MessageMSGCB_2
    425                HalUARTWrite(0,&pkt->cmd.Data[i+1],1);//·¢¸øPC»ú
   \                     ??SampleApp_MessageMSGCB_3:
   \   000041                ; Setup parameters for call to function HalUARTWrite
   \   000041   A8..         MOV     R0,?V0 + 0
   \   000043   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000046   28           ADD     A,R0
   \   000047   FA           MOV     R2,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   F583         MOV     DPH,A
   \   000050   A3           INC     DPTR
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   7900         MOV     R1,#0x0
   \   000057   12....       LCALL   ??HalUARTWrite?relay
   \   00005A   05..         INC     ?V0 + 0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   C3           CLR     C
   \   00005F   95..         SUBB    A,?V0 + 1
   \   000061   7C01         MOV     R4,#0x1
   \   000063   7D00         MOV     R5,#0x0
   \   000065   40DA         JC      ??SampleApp_MessageMSGCB_3
    426                HalUARTWrite(0,"\n",1);               // »Ø³µ»»ÐÐ
   \   000067                ; Setup parameters for call to function HalUARTWrite
   \   000067   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000069   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   12....       LCALL   ??HalUARTWrite?relay
    427                
    428                temp[0]=ascii[pkt->srcAddr.addr.shortAddr / 0x1000];
   \   000070   EE           MOV     A,R6
   \   000071   2406         ADD     A,#0x6
   \   000073   F8           MOV     R0,A
   \   000074   EF           MOV     A,R7
   \   000075   3400         ADDC    A,#0x0
   \   000077   F9           MOV     R1,A
   \   000078   E8           MOV     A,R0
   \   000079   FA           MOV     R2,A
   \   00007A   E9           MOV     A,R1
   \   00007B   FB           MOV     R3,A
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F5..         MOV     ?V0 + 1,A
   \   000087   740C         MOV     A,#0xc
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?US_SHR
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   E582         MOV     A,DPL
   \   000095   25..         ADD     A,?V0 + 0
   \   000097   F582         MOV     DPL,A
   \   000099   E583         MOV     A,DPH
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   F583         MOV     DPH,A
   \   00009F   12....       LCALL   ?Subroutine4 & 0xFFFF
    429                temp[1]=ascii[pkt->srcAddr.addr.shortAddr % 0x1000 / 0x0100];
   \                     ??CrossCallReturnLabel_6:
   \   0000A2   8A82         MOV     DPL,R2
   \   0000A4   8B83         MOV     DPH,R3
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   E4           CLR     A
   \   0000AA   C9           XCH     A,R1
   \   0000AB   540F         ANL     A,#0xf
   \   0000AD   F8           MOV     R0,A
   \   0000AE   7404         MOV     A,#0x4
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000B6   C0E0         PUSH    A
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
    430                temp[2]=ascii[pkt->srcAddr.addr.shortAddr % 0x0100 / 0x0010];
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   C4           SWAP    A
   \   0000C6   540F         ANL     A,#0xf
   \   0000C8   F8           MOV     R0,A
   \   0000C9   7404         MOV     A,#0x4
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000D1   C0E0         PUSH    A
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
    431                temp[3]=ascii[pkt->srcAddr.addr.shortAddr % 0x0010];
   \   0000DB   8A82         MOV     DPL,R2
   \   0000DD   8B83         MOV     DPH,R3
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   540F         ANL     A,#0xf
   \   0000E2   F8           MOV     R0,A
   \   0000E3   7404         MOV     A,#0x4
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000EB   C0E0         PUSH    A
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   D0E0         POP     A
   \   0000F4   F0           MOVX    @DPTR,A
    432                if(pkt->cmd.Data[1]=='1')
   \   0000F5   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6431         XRL     A,#0x31
   \   0000FC   7055         JNZ     ??SampleApp_MessageMSGCB_1
    433                {
    434                  HalUARTWrite(0," --0x",5);
   \   0000FE                ; Setup parameters for call to function HalUARTWrite
   \   0000FE   7C05         MOV     R4,#0x5
   \   000100   7D00         MOV     R5,#0x0
   \   000102   7A..         MOV     R2,#`?<Constant " --0x">` & 0xff
   \   000104   7B..         MOV     R3,#(`?<Constant " --0x">` >> 8) & 0xff
   \   000106   12....       LCALL   ??HalUARTWrite?relay
    435                  HalUARTWrite(0,temp,4);
   \   000109                ; Setup parameters for call to function HalUARTWrite
   \   000109   7C04         MOV     R4,#0x4
   \   00010B   7D00         MOV     R5,#0x0
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   AA82         MOV     R2,DPL
   \   000115   AB83         MOV     R3,DPH
   \   000117   7900         MOV     R1,#0x0
   \   000119   12....       LCALL   ??HalUARTWrite?relay
    436                  HalUARTWrite(0," : ",3);
   \   00011C                ; Setup parameters for call to function HalUARTWrite
   \   00011C   7C03         MOV     R4,#0x3
   \   00011E   7D00         MOV     R5,#0x0
   \   000120   7A..         MOV     R2,#`?<Constant " : ">` & 0xff
   \   000122   7B..         MOV     R3,#(`?<Constant " : ">` >> 8) & 0xff
   \   000124   7900         MOV     R1,#0x0
   \   000126   12....       LCALL   ??HalUARTWrite?relay
    437                  if(pkt->cmd.Data[2]=='A')
   \   000129   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00012C   6441         XRL     A,#0x41
   \   00012E   700E         JNZ     ??SampleApp_MessageMSGCB_4
    438                  {
    439                    HalUARTWrite(0,"LED1_toggle ",12);
   \   000130                ; Setup parameters for call to function HalUARTWrite
   \   000130   7C0C         MOV     R4,#0xc
   \   000132   7D00         MOV     R5,#0x0
   \   000134   7A..         MOV     R2,#`?<Constant "LED1_toggle ">` & 0xff
   \   000136   7B..         MOV     R3,#(`?<Constant "LED1_toggle ">` >> 8) & 0xff
   \   000138   12....       LCALL   ?Subroutine2 & 0xFFFF
    440                    HalUARTWrite(0,"\n",1);
    441                    LED1_toggle();
   \                     ??CrossCallReturnLabel_2:
   \   00013B                ; Setup parameters for call to function LED1_toggle
   \   00013B   12....       LCALL   ??LED1_toggle?relay
    442                  }
    443                  if(pkt->cmd.Data[2]=='B')
   \                     ??SampleApp_MessageMSGCB_4:
   \   00013E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000141   6442         XRL     A,#0x42
   \   000143   700E         JNZ     ??SampleApp_MessageMSGCB_1
    444                  {
    445                    HalUARTWrite(0,"LED2_toggle",12);
   \   000145                ; Setup parameters for call to function HalUARTWrite
   \   000145   7C0C         MOV     R4,#0xc
   \   000147   7D00         MOV     R5,#0x0
   \   000149   7A..         MOV     R2,#`?<Constant "LED2_toggle">` & 0xff
   \   00014B   7B..         MOV     R3,#(`?<Constant "LED2_toggle">` >> 8) & 0xff
   \   00014D   12....       LCALL   ?Subroutine2 & 0xFFFF
    446                    HalUARTWrite(0,"\n",1);
    447                    LED2_toggle();
   \                     ??CrossCallReturnLabel_3:
   \   000150                ; Setup parameters for call to function LED2_toggle
   \   000150   12....       LCALL   ??LED2_toggle?relay
    448                  }
    449                }
    450                break;
    451           
    452          
    453          
    454              /*case SAMPLEAPP_PERIODIC_CLUSTERID:
    455                
    456                break;
    457          
    458              case SAMPLEAPP_FLASH_CLUSTERID:
    459                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    460                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    461                break;*/
    462            }
    463          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000153   7414         MOV     A,#0x14
   \   000155   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine8_0
   \   000003                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    464          
    465          /*********************************************************************
    466           * @fn      SampleApp_SendPeriodicMessage
    467           *
    468           * @brief   Send the periodic message.
    469           *
    470           * @param   none
    471           *
    472           * @return  none
    473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    474          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    475          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    476            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    477                                 End1,
    478                                 1,
    479                                 (uint8*)&SampleAppPeriodicCounter,
    480                                 &SampleApp_TransID,
    481                                 AF_DISCV_ROUTE,
    482                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..04       MOV     ?V0 + 0,#0x4
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   7920         MOV     R1,#0x20
   \   000038   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00003A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003C   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003E   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000040   12....       LCALL   ??AF_DataRequest?relay
   \   000043   7409         MOV     A,#0x9
   \   000045   80..         SJMP    ?Subroutine0
    483            {
    484            }
    485            else
    486            {
    487              // Error occurred in request to send.
    488            }
    489          }
    490          
    491          /*********************************************************************
    492           * @fn      SampleApp_SendFlashMessage
    493           *
    494           * @brief   Send the flash message to group 1.
    495           *
    496           * @param   flashTime - in milliseconds
    497           *
    498           * @return  none
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    501          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    502            uint8 buffer[3];
    503            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000010   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    504            buffer[1] = LO_UINT16( flashTime );
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
    505            buffer[2] = HI_UINT16( flashTime );
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    506          
    507            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    508                                 SAMPLEAPP_FLASH_CLUSTERID,
    509                                 3,
    510                                 buffer,
    511                                 &SampleApp_TransID,
    512                                 AF_DISCV_ROUTE,
    513                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0 + 0,#0x3
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV     ?V0 + 0,#0x2
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ??AF_DataRequest?relay
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    514            {
    515            }
    516            else
    517            {
    518              // Error occurred in request to send.
    519            }
    520          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E                REQUIRE ?Subroutine0
   \   00006E                ; // Fall through to label ?Subroutine0
    521          
    522          /*********************************************************************
    523          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    524          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    525          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    526            uint8 i,len,*str=NULL;     //lenÓÐÓÃÊý¾Ý³¤¶È
    527            str=cmdMsg->msg;          //Ö¸ÏòÊý¾Ý¿ªÍ·
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 1,A
    528            len=*str;                 //msgÀïµÄµÚ1¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
    529          
    530            /********´òÓ¡³ö´®¿Ú½ÓÊÕµ½µÄÊý¾Ý£¬ÓÃÓÚÌáÊ¾*********/
    531          
    532            for(i=1;i<=len;i++)
   \   00001A   7E01         MOV     R6,#0x1
   \   00001C   8012         SJMP    ??SampleApp_SerialCMD_0
    533            HalUARTWrite(0,str+i,1 ); 
   \                     ??SampleApp_SerialCMD_1:
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   8E..         MOV     ?V0 + 4,R6
   \   000020   E5..         MOV     A,?V0 + 0
   \   000022   25..         ADD     A,?V0 + 4
   \   000024   FA           MOV     R2,A
   \   000025   E5..         MOV     A,?V0 + 1
   \   000027   3400         ADDC    A,#0x0
   \   000029   FB           MOV     R3,A
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   12....       LCALL   ??HalUARTWrite?relay
   \   00002F   0E           INC     R6
   \                     ??SampleApp_SerialCMD_0:
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   9E           SUBB    A,R6
   \   000034   7C01         MOV     R4,#0x1
   \   000036   7D00         MOV     R5,#0x0
   \   000038   50E4         JNC     ??SampleApp_SerialCMD_1
    534            HalUARTWrite(0,"\n",1 );//»»ÐÐ  
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00003C   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00003E   7900         MOV     R1,#0x0
   \   000040   12....       LCALL   ??HalUARTWrite?relay
    535          
    536            /*******·¢ËÍ³öÈ¥***²Î¿¼Íø·ä 1Ð¡Ê±ÎÞÏßÊý¾Ý´«Êä½Ì³Ì*********/
    537          
    538            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    539          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    540          	                    len+1,                  // Êý¾Ý³¤¶È         
    541                                      str,                     //Êý¾ÝÄÚÈÝ
    542          	                    &SampleApp_TransID, 
    543          	                    AF_DISCV_ROUTE,
    544          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000043                ; Setup parameters for call to function AF_DataRequest
   \   000043   75..1E       MOV     ?V0 + 3,#0x1e
   \   000046   78..         MOV     R0,#?V0 + 3
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   75....       MOV     ?V0 + 4,#SampleApp_TransID & 0xff
   \   00004E   75....       MOV     ?V0 + 5,#(SampleApp_TransID >> 8) & 0xff
   \   000051   78..         MOV     R0,#?V0 + 4
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   E5..         MOV     A,?V0 + 2
   \   00005D   2401         ADD     A,#0x1
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   E4           CLR     A
   \   000062   3400         ADDC    A,#0x0
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   75..03       MOV     ?V0 + 0,#0x3
   \   00006E   75..00       MOV     ?V0 + 1,#0x0
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   7920         MOV     R1,#0x20
   \   000078   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00007A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00007C   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00007E   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000080   12....       LCALL   ??AF_DataRequest?relay
   \   000083   7409         MOV     A,#0x9
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    545          	                     {
    546          	                     }
    547            else
    548            {
    549            // Error occurred in request to send.
    550            } 
    551          }
   \   000088   7F06         MOV     R7,#0x6
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57
   \   00000A   41           DB 65
   \   00000B   42           DB 66
   \   00000C   43           DB 67
   \   00000D   44           DB 68
   \   00000E   45           DB 69
   \   00000F   46           DB 70

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " --0x">`:
   \   000000   202D2D30     DB " --0x"
   \            7800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " : ">`:
   \   000000   203A2000     DB " : "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED1_toggle ">`:
   \   000000   4C454431     DB "LED1_toggle "
   \            5F746F67
   \            676C6520
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED2_toggle">`:
   \   000000   4C454432     DB "LED2_toggle"
   \            5F746F67
   \            676C6500

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> LED_Initial                   0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     42
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> LED1_toggle                   0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> LED2_toggle                   0      0     60
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SampleApp_SerialCMD                0      0     35
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     SampleApp_ClusterList                            12
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     Point_to_Point                                   12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     SampleApp_Init                                  192
     SampleApp_ProcessEvent                          196
     SampleApp_HandleKeys                             62
     ??Subroutine8_0                                   5
     SampleApp_MessageMSGCB                          344
     ?Subroutine5                                     13
     ?Subroutine3                                      4
     ?Subroutine6                                     11
     ?Subroutine7                                     12
     ?Subroutine2                                     19
     ?Subroutine1                                      7
     ?Subroutine0                                      3
     ?Subroutine4                                      9
     SampleApp_SendPeriodicMessage                    71
     SampleApp_SendFlashMessage                      110
     SampleApp_SerialCMD                             141
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_HandleKeys?relay                      6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleApp_SendPeriodicMessage?relay             6
     ??SampleApp_SendFlashMessage?relay                6
     ??SampleApp_SerialCMD?relay                       6
     ?<Constant "Hello World\n">                      13
     ?<Constant "Group 1">                             8
     ?<Constant "SampleApp">                          10
     ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56   16
     ?<Constant "\n">                                  2
     ?<Constant " --0x">                               6
     ?<Constant " : ">                                 4
     ?<Constant "LED1_toggle ">                       13
     ?<Constant "LED2_toggle">                        12

 
 1 199 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
   108 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 241 bytes of CODE  memory
   108 bytes of CONST memory
    65 bytes of XDATA memory

Errors: none
Warnings: 1
