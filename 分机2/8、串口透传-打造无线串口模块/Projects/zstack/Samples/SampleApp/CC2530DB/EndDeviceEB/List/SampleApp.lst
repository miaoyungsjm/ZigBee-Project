###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         13/Jun/2017  13:22:21 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          Source\SampleApp.c                                 #
#    Command line       =  -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFAA                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\Source\SampleApp.c -D       #
#                          NV_RESTORE -D NWK_AUTO_POLL -D ZTOOL_P1 -D         #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\f #
#                          inal\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\ #
#                           -lA D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ #
#                          ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\EndDeviceEB\List\ --diag_suppress    #
#                          Pe001,Pa010 -o D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú #
#                          2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö» #
#                          ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\Source\ -I             #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\hal\include\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\hal\target\C #
#                          C2530EB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8 #
#                          ¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sample #
#                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\mac #
#                          \include\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\ #
#                          8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\high_level\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö #
#                          »ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\ -I                          #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\mac\low_level\s #
#                          rf04\single_chip\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fina #
#                          l\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mt\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\ #
#                          8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\..\..\..\..\..\Components\os #
#                          al\include\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú #
#                          2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sam #
#                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\ #
#                          ·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\services\sdata\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\stack\af\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fina #
#                          l\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\nwk\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final #
#                          \·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sapi\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final #
#                          \·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstac #
#                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compon #
#                          ents\stack\sec\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\ #
#                          ·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\stack\sys\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\· #
#                          Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö #
#                          »ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡ #
#                          ¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples #
#                          \SampleApp\CC2530DB\..\..\..\..\..\Components\zmac #
#                          \f8w\ -Ohz --require_prototypes                    #
#    List file          =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\EndDeviceEB\List\SampleApp.lst            #
#    Object file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´ #
#                          òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\EndDeviceEB\Obj\SampleApp.r51             #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\·Ö»ú2\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT.h"
     77          
     78          //Ìí¼Ó LED µÄÍ·ÎÄ¼þ
     79          #include  "LED.h"
     80          
     81          //Ìí¼Ó DS18D20 ÎÂ¶È´«¸ÐÆ÷µÄÍ·ÎÄ¼þ
     82          #include  "ds18b20.h"
     83          
     84          //Ìí¼Ó DHT11 ÎÂÊª¶È´«¸ÐÆ÷µÄÍ·ÎÄ¼þ
     85          #include  "DHT11.h"
     86          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          bool DS_DHT_flag = false;
   \                     DS_DHT_flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          /*********************************************************************
     94           * CONSTANTS
     95           */
     96          
     97          /*********************************************************************
     98           * TYPEDEFS
     99           */
    100          
    101          /*********************************************************************
    102           * GLOBAL VARIABLES
    103           */
    104          
    105          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    106          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
    107          {
    108            SAMPLEAPP_PERIODIC_CLUSTERID,
    109            SAMPLEAPP_FLASH_CLUSTERID
    110          };
    111          

   \                                 In  segment XDATA_ROM_C, align 1
    112          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    113          {
    114            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    115            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    116            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    117            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    118            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    119            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    120            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    121            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    122            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    123          };
    124          
    125          // This is the Endpoint/Interface description.  It is defined here, but
    126          // filled-in in SampleApp_Init().  Another way to go would be to fill
    127          // in the structure here and make it a "const" (in code space).  The
    128          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    130          
    131          /*********************************************************************
    132           * EXTERNAL VARIABLES
    133           */
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL VARIABLES
    141           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143                                    // This variable will be received when
    144                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    151          
    152          //µã¶ÔµãµØÖ·

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          afAddrType_t Point_to_Point;
   \                     Point_to_Point:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    154          
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    157          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    160          
    161          /*********************************************************************
    162           * LOCAL FUNCTIONS
    163           */
    164          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    165          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    166          void SampleApp_SendPeriodicMessage( void );
    167          void SampleApp_SendFlashMessage( uint16 flashTime );
    168          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    169          
    170          /*********************************************************************
    171           * NETWORK LAYER CALLBACKS
    172           */
    173          
    174          /*********************************************************************
    175           * PUBLIC FUNCTIONS
    176           */
    177          
    178          /*********************************************************************
    179           * @fn      SampleApp_Init
    180           *
    181           * @brief   Initialization function for the Generic App Task.
    182           *          This is called during initialization and should contain
    183           *          any application specific initialization (ie. hardware
    184           *          initialization/setup, table initialization, power up
    185           *          notificaiton ... ).
    186           *
    187           * @param   task_id - the ID assigned by OSAL.  This ID should be
    188           *                    used to send messages and set timers.
    189           *
    190           * @return  none
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    193          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    195            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    196            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    197            
    198            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    199            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    200            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    201            
    202            // LED ³õÊ¼»¯
    203            LED_Initial();
   \   00002B                ; Setup parameters for call to function LED_Initial
   \   00002B   12....       LCALL   ??LED_Initial?relay
    204            
    205            //DS18D20 ÎÂ¶È´«¸ÐÆ÷µÄ io ¿Ú³õÊ¼»¯P0_6
    206            //DHT11 ÎÂÊª¶È´«¸ÐÆ÷µÄ io ¿Ú³õÊ¼»¯P0_7
    207            P0SEL &= 0x3f;
   \   00002E   53F33F       ANL     0xf3,#0x3f
    208            
    209            // Device hardware initialization can be added here or in main() (Zmain.c).
    210            // If the hardware is application specific - add it here.
    211            // If the hardware is other parts of the device add it in main().
    212          
    213           #if defined ( BUILD_ALL_DEVICES )
    214            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    215            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    216            // together - if they are - we will start up a coordinator. Otherwise,
    217            // the device will start as a router.
    218            if ( readCoordinatorJumper() )
    219              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    220            else
    221              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    222          #endif // BUILD_ALL_DEVICES
    223          
    224          #if defined ( HOLD_AUTO_START )
    225            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    226            //  from starting the device and wait for the application to
    227            //  start the device.
    228            ZDOInitDevice(0);
    229          #endif
    230          
    231            // Setup for the periodic message's destination address
    232            // Broadcast to everyone
    233            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000031   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000034   740F         MOV     A,#0xf
   \   000036   F0           MOVX    @DPTR,A
    234            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000037   A3           INC     DPTR
   \   000038   7414         MOV     A,#0x14
   \   00003A   F0           MOVX    @DPTR,A
    235            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00003B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    236          
    237            // Setup for the flash command's destination address - Group 1
    238            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000043   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000046   7401         MOV     A,#0x1
   \   000048   F0           MOVX    @DPTR,A
    239            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000049   A3           INC     DPTR
   \   00004A   7414         MOV     A,#0x14
   \   00004C   F0           MOVX    @DPTR,A
    240            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E4           CLR     A
   \   000055   F0           MOVX    @DPTR,A
    241            
    242            // ÉèÖÃµã¶ÔµãµÄ·¢ËÍÄ£Ê½
    243            Point_to_Point.addrMode = (afAddrMode_t)Addr16Bit;
   \   000056   90....       MOV     DPTR,#Point_to_Point + 8
   \   000059   7402         MOV     A,#0x2
   \   00005B   F0           MOVX    @DPTR,A
    244            Point_to_Point.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005C   A3           INC     DPTR
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    245            //Point_to_Point.addr.shortAddr = 0x????;
    246          
    247            // Fill out the endpoint description.
    248            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000060   90....       MOV     DPTR,#SampleApp_epDesc
   \   000063   F0           MOVX    @DPTR,A
    249            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006B   F0           MOVX    @DPTR,A
    250            SampleApp_epDesc.simpleDesc
    251                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000073   F0           MOVX    @DPTR,A
    252            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000074   A3           INC     DPTR
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
    253          
    254            // Register the endpoint description with the AF
    255            afRegister( &SampleApp_epDesc );
   \   000077                ; Setup parameters for call to function afRegister
   \   000077   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000079   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007B   12....       LCALL   ??afRegister?relay
    256          
    257            // Register for all key events - This app will handle all key events
    258            RegisterForKeys( SampleApp_TaskID );
   \   00007E                ; Setup parameters for call to function RegisterForKeys
   \   00007E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??RegisterForKeys?relay
    259          
    260            // By default, all devices start out in Group 1
    261            SampleApp_Group.ID = 0x0001;
   \   000086   90....       MOV     DPTR,#SampleApp_Group
   \   000089   7401         MOV     A,#0x1
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
    262            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00008F                ; Setup parameters for call to function osal_memcpy
   \   00008F   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000092   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000095   F5..         MOV     ?V0 + 2,A
   \   000097   78..         MOV     R0,#?V0 + 0
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009C   7C07         MOV     R4,#0x7
   \   00009E   7D00         MOV     R5,#0x0
   \   0000A0   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A2   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A4   12....       LCALL   ??osal_memcpy?relay
   \   0000A7   7403         MOV     A,#0x3
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
    263            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000AC                ; Setup parameters for call to function aps_AddGroup
   \   0000AC   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AE   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B0   7914         MOV     R1,#0x14
   \   0000B2   12....       LCALL   ??aps_AddGroup?relay
    264          
    265          #if defined ( LCD_SUPPORTED )
    266            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B5                ; Setup parameters for call to function HalLcdWriteString
   \   0000B5   7901         MOV     R1,#0x1
   \   0000B7   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B9   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BB   12....       LCALL   ??HalLcdWriteString?relay
    267          #endif
    268          }
   \   0000BE   7F03         MOV     R7,#0x3
   \   0000C0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C3                REQUIRE P0SEL
    269          
    270          /*********************************************************************
    271           * @fn      SampleApp_ProcessEvent
    272           *
    273           * @brief   Generic Application Task event processor.  This function
    274           *          is called to process all events for the task.  Events
    275           *          include timers, messages and any other user defined events.
    276           *
    277           * @param   task_id  - The OSAL assigned task ID.
    278           * @param   events - events to process.  This is a bit map and can
    279           *                   contain more than one event.
    280           *
    281           * @return  none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    284          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    285            afIncomingMSGPacket_t *MSGpkt;
    286            (void)task_id;  // Intentionally unreferenced parameter
    287          
    288            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    289            {
    290              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   802B         SJMP    ??SampleApp_ProcessEvent_1
    291              while ( MSGpkt )
    292              {
    293                switch ( MSGpkt->hdr.event )
    294                {
    295                  case CMD_SERIAL_MSG:  //´®¿ÚÊÕµ½Êý¾ÝºóÓÉMT_UART²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬ÓÃÍø·ä·½·¨½ÓÊÕ£¬±àÒëÊ±²»¶¨ÒåMTÏà¹ØÄÚÈÝ 
    296                   SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    297                   break;
    298          
    299                  // Received when a key is pressed
    300                    case KEY_CHANGE:
    301                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    302                    break;
    303          
    304                  // Received when a messages is received (OTA) for this endpoint
    305                  case AF_INCOMING_MSG_CMD:
    306                    SampleApp_MessageMSGCB( MSGpkt );
    307                    break;
    308          
    309                  // Received whenever the device changes state in the network
    310                  case ZDO_STATE_CHANGE:
    311                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    312                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    313                        || (SampleApp_NwkState == DEV_ROUTER)
    314                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6409         XRL     A,#0x9
   \   00001A   600A         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6407         XRL     A,#0x7
   \   00001F   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6406         XRL     A,#0x6
   \   000024   7010         JNZ     ??SampleApp_ProcessEvent_4
    315                    {
    316                      // Start sending the periodic message in a regular interval.
    317                      osal_start_timerEx( SampleApp_TaskID,
    318                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    319                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7CB8         MOV     R4,#-0x48
   \   000028   7D0B         MOV     R5,#0xb
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay
    320                    }
    321                    else
    322                    {
    323                      // Device is no longer in the network
    324                    }
    325                    break;
    326          
    327                  default:
    328                    break;
    329                }
    330          
    331                // Release the memory
    332                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    333          
    334                // Next - if one is available
    335                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   603E         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   14           DEC     A
   \   000057   600E         JZ      ??SampleApp_ProcessEvent_6
   \   000059   24E7         ADD     A,#-0x19
   \   00005B   6027         JZ      ??SampleApp_ProcessEvent_7
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   600F         JZ      ??SampleApp_ProcessEvent_8
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AD         JZ      ??SampleApp_ProcessEvent_2
   \   000065   80CF         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000067                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_SerialCMD?relay
   \   00006E   80C6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000070                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000082   80B2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000084                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
   \   000088   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00008B   80A9         SJMP    ??SampleApp_ProcessEvent_4
    336              }
    337          
    338              // return unprocessed events
    339              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   000092   FB           MOV     R3,A
   \   000093   802A         SJMP    ??SampleApp_ProcessEvent_10
    340            }
    341          
    342            // Send a message out - This event is generated by a timer
    343            //  (setup in SampleApp_Init()).
    344            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000095   EE           MOV     A,R6
   \   000096   A2E0         MOV     C,0xE0 /* A   */.0
   \   000098   5021         JNC     ??SampleApp_ProcessEvent_11
    345            {
    346              // Send the periodic message
    347              SampleApp_SendPeriodicMessage();
   \   00009A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    348          
    349              // Setup to send message again in normal period (+ a little jitter)
    350              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    351                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00009D                ; Setup parameters for call to function osal_rand
   \   00009D   12....       LCALL   ??osal_rand?relay
   \   0000A0                ; Setup parameters for call to function osal_start_timerEx
   \   0000A0   EA           MOV     A,R2
   \   0000A1   24B8         ADD     A,#-0x48
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   340B         ADDC    A,#0xb
   \   0000A7   FD           MOV     R5,A
   \   0000A8   7A01         MOV     R2,#0x1
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??osal_start_timerEx?relay
    352          
    353              // return unprocessed events
    354              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000B4   EE           MOV     A,R6
   \   0000B5   6401         XRL     A,#0x1
   \   0000B7   FA           MOV     R2,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   80D7         SJMP    ??SampleApp_ProcessEvent_9
    355            }
    356          
    357            // Discard unknown events
    358            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BF   7F04         MOV     R7,#0x4
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    359          }
    360          
    361          /*********************************************************************
    362           * Event Generation Functions
    363           */
    364          /*********************************************************************
    365           * @fn      SampleApp_HandleKeys
    366           *
    367           * @brief   Handles all key events for this device.
    368           *
    369           * @param   shift - true if in shift/alt.
    370           * @param   keys - bit field for key events. Valid entries:
    371           *                 HAL_KEY_SW_2
    372           *                 HAL_KEY_SW_1
    373           *
    374           * @return  none
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    377          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    378            (void)shift;  // Intentionally unreferenced parameter
    379            
    380            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    381            {
    382              /* This key sends the Flash Command is sent to Group 1.
    383               * This device will not receive the Flash Command from this
    384               * device (even if it belongs to group 1).
    385               */
    386              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    387            }
    388          
    389            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    390            {
    391              /* The Flashr Command is sent to Group 1.
    392               * This key toggles this device in and out of group 1.
    393               * If this device doesn't belong to group 1, this application
    394               * will not receive the Flash command sent to group 1.
    395               */
    396              aps_Group_t *grp;
    397              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    398              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    399              {
    400                // Remove from the group
    401                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    402              }
    403              else
    404              {
    405                // Add to the flash group
    406                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    407              }
    408            }
    409          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine9_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    410          
    411          /*********************************************************************
    412           * LOCAL FUNCTIONS
    413           */
    414          
    415          /*********************************************************************
    416           * @fn      SampleApp_MessageMSGCB
    417           *
    418           * @brief   Data message processor callback.  This function processes
    419           *          any incoming data - probably from other devices.  So, based
    420           *          on cluster ID, perform the intended action.
    421           *
    422           * @param   none
    423           *
    424           * @return  none
    425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    426          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    427          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    428            uint16 flashTime;
                          ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    429            uint8 ascii[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` & 0xff
   \   00001D   7410         MOV     A,#0x10
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    430            uint8 temp[4];
    431            
    432            switch ( pkt->clusterId )
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6403         XRL     A,#0x3
   \   00002D   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000031   6003         JZ      $+5
   \   000033   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    433            {
    434               uint8 i,len;
    435               case SAMPLEAPP_COM_CLUSTERID:     //Èç¹ûÊÇ´®¿ÚÍ¸´«µÄÐÅÏ¢
    436                len=pkt->cmd.Data[0];
   \   000036   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F5..         MOV     ?V0 + 1,A
    437                for(i=0;i<len;i++)
   \   00003C   75..00       MOV     ?V0 + 0,#0x0
   \   00003F   801B         SJMP    ??SampleApp_MessageMSGCB_2
    438                HalUARTWrite(0,&pkt->cmd.Data[i+1],1);//·¢¸øPC»ú
   \                     ??SampleApp_MessageMSGCB_3:
   \   000041                ; Setup parameters for call to function HalUARTWrite
   \   000041   A8..         MOV     R0,?V0 + 0
   \   000043   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000046   28           ADD     A,R0
   \   000047   FA           MOV     R2,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   F583         MOV     DPH,A
   \   000050   A3           INC     DPTR
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   7900         MOV     R1,#0x0
   \   000057   12....       LCALL   ??HalUARTWrite?relay
   \   00005A   05..         INC     ?V0 + 0
   \                     ??SampleApp_MessageMSGCB_2:
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   C3           CLR     C
   \   00005F   95..         SUBB    A,?V0 + 1
   \   000061   7C01         MOV     R4,#0x1
   \   000063   7D00         MOV     R5,#0x0
   \   000065   40DA         JC      ??SampleApp_MessageMSGCB_3
    439                HalUARTWrite(0,"\n",1);               // »Ø³µ»»ÐÐ
   \   000067                ; Setup parameters for call to function HalUARTWrite
   \   000067   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000069   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   12....       LCALL   ??HalUARTWrite?relay
    440                
    441                temp[0]=ascii[pkt->srcAddr.addr.shortAddr / 0x1000];
   \   000070   EE           MOV     A,R6
   \   000071   2406         ADD     A,#0x6
   \   000073   F8           MOV     R0,A
   \   000074   EF           MOV     A,R7
   \   000075   3400         ADDC    A,#0x0
   \   000077   F9           MOV     R1,A
   \   000078   E8           MOV     A,R0
   \   000079   FA           MOV     R2,A
   \   00007A   E9           MOV     A,R1
   \   00007B   FB           MOV     R3,A
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F5..         MOV     ?V0 + 1,A
   \   000087   740C         MOV     A,#0xc
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?US_SHR
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   E582         MOV     A,DPL
   \   000095   25..         ADD     A,?V0 + 0
   \   000097   F582         MOV     DPL,A
   \   000099   E583         MOV     A,DPH
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   F583         MOV     DPH,A
   \   00009F   12....       LCALL   ?Subroutine5 & 0xFFFF
    442                temp[1]=ascii[pkt->srcAddr.addr.shortAddr % 0x1000 / 0x0100];
   \                     ??CrossCallReturnLabel_8:
   \   0000A2   8A82         MOV     DPL,R2
   \   0000A4   8B83         MOV     DPH,R3
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   E4           CLR     A
   \   0000AA   C9           XCH     A,R1
   \   0000AB   540F         ANL     A,#0xf
   \   0000AD   F8           MOV     R0,A
   \   0000AE   7404         MOV     A,#0x4
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000B6   C0E0         PUSH    A
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
    443                temp[2]=ascii[pkt->srcAddr.addr.shortAddr % 0x0100 / 0x0010];
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   C4           SWAP    A
   \   0000C6   540F         ANL     A,#0xf
   \   0000C8   F8           MOV     R0,A
   \   0000C9   7404         MOV     A,#0x4
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000D1   C0E0         PUSH    A
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
    444                temp[3]=ascii[pkt->srcAddr.addr.shortAddr % 0x0010];
   \   0000DB   8A82         MOV     DPL,R2
   \   0000DD   8B83         MOV     DPH,R3
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   540F         ANL     A,#0xf
   \   0000E2   F8           MOV     R0,A
   \   0000E3   7404         MOV     A,#0x4
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000EB   C0E0         PUSH    A
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   D0E0         POP     A
   \   0000F4   F0           MOVX    @DPTR,A
    445                if(pkt->cmd.Data[1]=='2')
   \   0000F5   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   6432         XRL     A,#0x32
   \   0000FC   7073         JNZ     ??SampleApp_MessageMSGCB_1
    446                {
    447                  HalUARTWrite(0," --0x",5);
   \   0000FE                ; Setup parameters for call to function HalUARTWrite
   \   0000FE   7C05         MOV     R4,#0x5
   \   000100   7D00         MOV     R5,#0x0
   \   000102   7A..         MOV     R2,#`?<Constant " --0x">` & 0xff
   \   000104   7B..         MOV     R3,#(`?<Constant " --0x">` >> 8) & 0xff
   \   000106   12....       LCALL   ??HalUARTWrite?relay
    448                  HalUARTWrite(0,temp,4);
   \   000109                ; Setup parameters for call to function HalUARTWrite
   \   000109   7C04         MOV     R4,#0x4
   \   00010B   7D00         MOV     R5,#0x0
   \   00010D   85..82       MOV     DPL,?XSP + 0
   \   000110   85..83       MOV     DPH,?XSP + 1
   \   000113   AA82         MOV     R2,DPL
   \   000115   AB83         MOV     R3,DPH
   \   000117   7900         MOV     R1,#0x0
   \   000119   12....       LCALL   ??HalUARTWrite?relay
    449                  HalUARTWrite(0," : ",3);
   \   00011C                ; Setup parameters for call to function HalUARTWrite
   \   00011C   7C03         MOV     R4,#0x3
   \   00011E   7D00         MOV     R5,#0x0
   \   000120   7A..         MOV     R2,#`?<Constant " : ">` & 0xff
   \   000122   7B..         MOV     R3,#(`?<Constant " : ">` >> 8) & 0xff
   \   000124   7900         MOV     R1,#0x0
   \   000126   12....       LCALL   ??HalUARTWrite?relay
    450                  if(pkt->cmd.Data[2]=='A')
   \   000129   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00012C   6441         XRL     A,#0x41
   \   00012E   700E         JNZ     ??SampleApp_MessageMSGCB_4
    451                  {
    452                    HalUARTWrite(0,"LED1_toggle ",12);
   \   000130                ; Setup parameters for call to function HalUARTWrite
   \   000130   7C0C         MOV     R4,#0xc
   \   000132   7D00         MOV     R5,#0x0
   \   000134   7A..         MOV     R2,#`?<Constant "LED1_toggle ">` & 0xff
   \   000136   7B..         MOV     R3,#(`?<Constant "LED1_toggle ">` >> 8) & 0xff
   \   000138   12....       LCALL   ??Subroutine8_0 & 0xFFFF
    453                    HalUARTWrite(0,"\n",1);
    454                    LED1_toggle();
   \                     ??CrossCallReturnLabel_16:
   \   00013B                ; Setup parameters for call to function LED1_toggle
   \   00013B   12....       LCALL   ??LED1_toggle?relay
    455                  }
    456                  if(pkt->cmd.Data[2]=='B')
   \                     ??SampleApp_MessageMSGCB_4:
   \   00013E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000141   6442         XRL     A,#0x42
   \   000143   700E         JNZ     ??SampleApp_MessageMSGCB_5
    457                  {
    458                    HalUARTWrite(0,"LED2_toggle ",12);
   \   000145                ; Setup parameters for call to function HalUARTWrite
   \   000145   7C0C         MOV     R4,#0xc
   \   000147   7D00         MOV     R5,#0x0
   \   000149   7A..         MOV     R2,#`?<Constant "LED2_toggle ">` & 0xff
   \   00014B   7B..         MOV     R3,#(`?<Constant "LED2_toggle ">` >> 8) & 0xff
   \   00014D   12....       LCALL   ??Subroutine8_0 & 0xFFFF
    459                    HalUARTWrite(0,"\n",1);
    460                    LED2_toggle();
   \                     ??CrossCallReturnLabel_17:
   \   000150                ; Setup parameters for call to function LED2_toggle
   \   000150   12....       LCALL   ??LED2_toggle?relay
    461                  }
    462                  if(pkt->cmd.Data[2]=='C')
   \                     ??SampleApp_MessageMSGCB_5:
   \   000153   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000156   6443         XRL     A,#0x43
   \   000158   7017         JNZ     ??SampleApp_MessageMSGCB_1
    463                  {
    464                    HalUARTWrite(0,"DS18b20 DHT11 ",14);
   \   00015A                ; Setup parameters for call to function HalUARTWrite
   \   00015A   7C0E         MOV     R4,#0xe
   \   00015C   7D00         MOV     R5,#0x0
   \   00015E   7A..         MOV     R2,#`?<Constant "DS18b20 DHT11 ">` & 0xff
   \   000160   7B..         MOV     R3,#(`?<Constant "DS18b20 DHT11 ">` >> 8) & 0xff
   \   000162   12....       LCALL   ??Subroutine8_0 & 0xFFFF
    465                    HalUARTWrite(0,"\n",1);
    466                    DS_DHT_flag = !DS_DHT_flag;
   \                     ??CrossCallReturnLabel_18:
   \   000165   90....       MOV     DPTR,#DS_DHT_flag
   \   000168   E0           MOVX    A,@DPTR
   \   000169   7004         JNZ     ??SampleApp_MessageMSGCB_6
   \   00016B   7401         MOV     A,#0x1
   \   00016D   8001         SJMP    ??SampleApp_MessageMSGCB_7
   \                     ??SampleApp_MessageMSGCB_6:
   \   00016F   E4           CLR     A
   \                     ??SampleApp_MessageMSGCB_7:
   \   000170   F0           MOVX    @DPTR,A
    467                  }
    468                }
    469                break;
    470           
    471          
    472          
    473              /*case SAMPLEAPP_PERIODIC_CLUSTERID:
    474                
    475                break;
    476          
    477              case SAMPLEAPP_FLASH_CLUSTERID:
    478                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    479                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    480                break;*/
    481            }
    482          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000171   7414         MOV     A,#0x14
   \   000173   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005                ; Setup parameters for call to function HalUARTWrite
   \   000005   7C01         MOV     R4,#0x1
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00000B   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ??HalUARTWrite?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine9_0
   \   000003                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    483          
    484          /*********************************************************************
    485           * @fn      SampleApp_SendPeriodicMessage
    486           *
    487           * @brief   Send the periodic message.
    488           *
    489           * @param   none
    490           *
    491           * @return  none
    492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    494          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    495            uint8 T[5];    //ÎÂ¶È+ÌáÊ¾·û
    496            uint8 TH[8];   //ÎÂÊª¶È+ÌáÊ¾·û
    497            uint8 send_str[6];   //·¢ËÍ×Ö·û´®
    498            
    499            Temp_test();   //ÎÂ¶È¼ì²â
   \   00000A                ; Setup parameters for call to function Temp_test
   \   00000A   12....       LCALL   ??Temp_test?relay
    500            T[0]=temp/10+48;
   \   00000D   75F00A       MOV     B,#0xa
   \   000010   90....       MOV     DPTR,#temp
   \   000013   E0           MOVX    A,@DPTR
   \   000014   84           DIV     AB
   \   000015   2430         ADD     A,#0x30
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   F0           MOVX    @DPTR,A
    501            T[1]=temp%10+48;
   \   00001E   90....       MOV     DPTR,#temp
   \   000021   E0           MOVX    A,@DPTR
   \   000022   75F00A       MOV     B,#0xa
   \   000025   84           DIV     AB
   \   000026   E5F0         MOV     A,B
   \   000028   2430         ADD     A,#0x30
   \   00002A   C0E0         PUSH    A
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    502            T[2]='C';
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   7443         MOV     A,#0x43
   \   00003B   F0           MOVX    @DPTR,A
    503            /*******´®¿Ú´òÓ¡ WEBEE*********/
    504            HalUARTWrite(0,"--DS18B20 : ",12);
   \   00003C                ; Setup parameters for call to function HalUARTWrite
   \   00003C   7C0C         MOV     R4,#0xc
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A..         MOV     R2,#`?<Constant "--DS18B20 : ">` & 0xff
   \   000042   7B..         MOV     R3,#(`?<Constant "--DS18B20 : ">` >> 8) & 0xff
   \   000044   7900         MOV     R1,#0x0
   \   000046   12....       LCALL   ??HalUARTWrite?relay
    505            HalUARTWrite(0,T,3);
   \   000049                ; Setup parameters for call to function HalUARTWrite
   \   000049   7C03         MOV     R4,#0x3
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   12....       LCALL   ?Subroutine1 & 0xFFFF
    506            HalUARTWrite(0,"\n",1);
    507           
    508            
    509            DHT11();    //ÎÂÊª¶È¼ì²â
   \                     ??CrossCallReturnLabel_14:
   \   000056                ; Setup parameters for call to function DHT11
   \   000056   12....       LCALL   ??DHT11?relay
    510            TH[0]=wendu_shi+48;
   \   000059   90....       MOV     DPTR,#wendu_shi
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   2430         ADD     A,#0x30
   \   00005F   C0E0         PUSH    A
   \   000061   740B         MOV     A,#0xb
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
    511            TH[1]=wendu_ge+48;
   \   000069   90....       MOV     DPTR,#wendu_ge
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   2430         ADD     A,#0x30
   \   00006F   C0E0         PUSH    A
   \   000071   740C         MOV     A,#0xc
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   D0E0         POP     A
   \   000078   F0           MOVX    @DPTR,A
    512            TH[2]='C';
   \   000079   740D         MOV     A,#0xd
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7443         MOV     A,#0x43
   \   000080   F0           MOVX    @DPTR,A
    513            TH[3]=' ';
   \   000081   740E         MOV     A,#0xe
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   7420         MOV     A,#0x20
   \   000088   F0           MOVX    @DPTR,A
    514            TH[4]=shidu_shi+48;
   \   000089   90....       MOV     DPTR,#shidu_shi
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   2430         ADD     A,#0x30
   \   00008F   C0E0         PUSH    A
   \   000091   740F         MOV     A,#0xf
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   D0E0         POP     A
   \   000098   F0           MOVX    @DPTR,A
    515            TH[5]=shidu_ge+48;
   \   000099   90....       MOV     DPTR,#shidu_ge
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   2430         ADD     A,#0x30
   \   00009F   C0E0         PUSH    A
   \   0000A1   7410         MOV     A,#0x10
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   D0E0         POP     A
   \   0000A8   F0           MOVX    @DPTR,A
    516            HalUARTWrite(0,"--DHT11   : ",12);
   \   0000A9                ; Setup parameters for call to function HalUARTWrite
   \   0000A9   7C0C         MOV     R4,#0xc
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   7A..         MOV     R2,#`?<Constant "--DHT11   : ">` & 0xff
   \   0000AF   7B..         MOV     R3,#(`?<Constant "--DHT11   : ">` >> 8) & 0xff
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   12....       LCALL   ??HalUARTWrite?relay
    517            HalUARTWrite(0,TH,6);
   \   0000B6                ; Setup parameters for call to function HalUARTWrite
   \   0000B6   7C06         MOV     R4,#0x6
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   740B         MOV     A,#0xb
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ?Subroutine1 & 0xFFFF
    518            HalUARTWrite(0,"\n",1);
    519            
    520            send_str[0]=T[0];
   \                     ??CrossCallReturnLabel_15:
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C0E0         PUSH    A
   \   0000CB   7405         MOV     A,#0x5
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
    521            send_str[1]=T[1];
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   7406         MOV     A,#0x6
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
    522            send_str[2]=',';
   \   0000E3   7407         MOV     A,#0x7
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   742C         MOV     A,#0x2c
   \   0000EA   F0           MOVX    @DPTR,A
    523            send_str[3]=TH[4];
   \   0000EB   740F         MOV     A,#0xf
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   C0E0         PUSH    A
   \   0000F3   7408         MOV     A,#0x8
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
    524            send_str[4]=TH[5];
   \   0000FB   7410         MOV     A,#0x10
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   7409         MOV     A,#0x9
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
    525            send_str[5]='\n';
   \   00010B   740A         MOV     A,#0xa
   \   00010D   12....       LCALL   ?XSTACK_DISP0_8
   \   000110   740A         MOV     A,#0xa
   \   000112   F0           MOVX    @DPTR,A
    526            
    527            if(true)//DS_DHT_flag
    528            {
    529              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    530                                 End2,
    531                                 6,
    532                                 send_str,
    533                                 &SampleApp_TransID,
    534                                 AF_DISCV_ROUTE,
    535                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000113                ; Setup parameters for call to function AF_DataRequest
   \   000113   75..1E       MOV     ?V0 + 0,#0x1e
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011B   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00011E   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000121   78..         MOV     R0,#?V0 + 0
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   7408         MOV     A,#0x8
   \   000128   12....       LCALL   ?XSTACK_DISP0_8
   \   00012B   8582..       MOV     ?V0 + 0,DPL
   \   00012E   8583..       MOV     ?V0 + 1,DPH
   \   000131   78..         MOV     R0,#?V0 + 0
   \   000133   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000136   75..06       MOV     ?V0 + 0,#0x6
   \   000139   75..00       MOV     ?V0 + 1,#0x0
   \   00013C   78..         MOV     R0,#?V0 + 0
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000141   75..05       MOV     ?V0 + 0,#0x5
   \   000144   78..         MOV     R0,#?V0 + 0
   \   000146   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000149   7920         MOV     R1,#0x20
   \   00014B   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00014D   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00014F   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000151   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000153   12....       LCALL   ??AF_DataRequest?relay
   \   000156   7409         MOV     A,#0x9
   \   000158   12....       LCALL   ?DEALLOC_XSTACK8
    536              {
    537              }
    538              else
    539              {
    540                // Error occurred in request to send.
    541              }
    542            }
    543            else
    544            {
    545              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    546                               End2,
    547                               1,
    548                               (uint8*)&SampleAppPeriodicCounter,
    549                               &SampleApp_TransID,
    550                               AF_DISCV_ROUTE,
    551                               AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    552              {
    553              }
    554              else
    555              {
    556                // Error occurred in request to send.
    557              }
    558            }
    559          }
   \   00015B   7413         MOV     A,#0x13
   \   00015D   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine8_0
   \   000004                ; // Fall through to label ??Subroutine8_0
    560          
    561          /*********************************************************************
    562           * @fn      SampleApp_SendFlashMessage
    563           *
    564           * @brief   Send the flash message to group 1.
    565           *
    566           * @param   flashTime - in milliseconds
    567           *
    568           * @return  none
    569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    571          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    572            uint8 buffer[3];
    573            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000010   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    574            buffer[1] = LO_UINT16( flashTime );
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
    575            buffer[2] = HI_UINT16( flashTime );
   \   00001D   7402         MOV     A,#0x2
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    576          
    577            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    578                                 SAMPLEAPP_FLASH_CLUSTERID,
    579                                 3,
    580                                 buffer,
    581                                 &SampleApp_TransID,
    582                                 AF_DISCV_ROUTE,
    583                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000024                ; Setup parameters for call to function AF_DataRequest
   \   000024   75..1E       MOV     ?V0 + 0,#0x1e
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   8582..       MOV     ?V0 + 0,DPL
   \   00003F   8583..       MOV     ?V0 + 1,DPH
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..03       MOV     ?V0 + 0,#0x3
   \   00004A   75..00       MOV     ?V0 + 1,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV     ?V0 + 0,#0x2
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00005E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000060   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000062   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000064   12....       LCALL   ??AF_DataRequest?relay
   \   000067   7409         MOV     A,#0x9
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    584            {
    585            }
    586            else
    587            {
    588              // Error occurred in request to send.
    589            }
    590          }
   \   00006C   7403         MOV     A,#0x3
   \   00006E                REQUIRE ?Subroutine0
   \   00006E                ; // Fall through to label ?Subroutine0
    591          
    592          /*********************************************************************
    593          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    595          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    596            uint8 i,len,*str=NULL;     //lenÓÐÓÃÊý¾Ý³¤¶È
    597            str=cmdMsg->msg;          //Ö¸ÏòÊý¾Ý¿ªÍ·
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 1,A
    598            len=*str;                 //msgÀïµÄµÚ1¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
    599          
    600            /********´òÓ¡³ö´®¿Ú½ÓÊÕµ½µÄÊý¾Ý£¬ÓÃÓÚÌáÊ¾*********/
    601          
    602            for(i=1;i<=len;i++)
   \   00001A   7E01         MOV     R6,#0x1
   \   00001C   8012         SJMP    ??SampleApp_SerialCMD_0
    603            HalUARTWrite(0,str+i,1 ); 
   \                     ??SampleApp_SerialCMD_1:
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   8E..         MOV     ?V0 + 4,R6
   \   000020   E5..         MOV     A,?V0 + 0
   \   000022   25..         ADD     A,?V0 + 4
   \   000024   FA           MOV     R2,A
   \   000025   E5..         MOV     A,?V0 + 1
   \   000027   3400         ADDC    A,#0x0
   \   000029   FB           MOV     R3,A
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   12....       LCALL   ??HalUARTWrite?relay
   \   00002F   0E           INC     R6
   \                     ??SampleApp_SerialCMD_0:
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   9E           SUBB    A,R6
   \   000034   7C01         MOV     R4,#0x1
   \   000036   7D00         MOV     R5,#0x0
   \   000038   50E4         JNC     ??SampleApp_SerialCMD_1
    604            HalUARTWrite(0,"\n",1 );//»»ÐÐ  
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00003C   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00003E   7900         MOV     R1,#0x0
   \   000040   12....       LCALL   ??HalUARTWrite?relay
    605          
    606            /*******·¢ËÍ³öÈ¥***²Î¿¼Íø·ä 1Ð¡Ê±ÎÞÏßÊý¾Ý´«Êä½Ì³Ì*********/
    607          
    608            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    609          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    610          	                    len+1,                  // Êý¾Ý³¤¶È         
    611                                      str,                     //Êý¾ÝÄÚÈÝ
    612          	                    &SampleApp_TransID, 
    613          	                    AF_DISCV_ROUTE,
    614          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000043                ; Setup parameters for call to function AF_DataRequest
   \   000043   75..1E       MOV     ?V0 + 3,#0x1e
   \   000046   78..         MOV     R0,#?V0 + 3
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   75....       MOV     ?V0 + 4,#SampleApp_TransID & 0xff
   \   00004E   75....       MOV     ?V0 + 5,#(SampleApp_TransID >> 8) & 0xff
   \   000051   78..         MOV     R0,#?V0 + 4
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   E5..         MOV     A,?V0 + 2
   \   00005D   2401         ADD     A,#0x1
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   E4           CLR     A
   \   000062   3400         ADDC    A,#0x0
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   75..03       MOV     ?V0 + 0,#0x3
   \   00006E   75..00       MOV     ?V0 + 1,#0x0
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   7920         MOV     R1,#0x20
   \   000078   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00007A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00007C   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00007E   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000080   12....       LCALL   ??AF_DataRequest?relay
   \   000083   7409         MOV     A,#0x9
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    615          	                     {
    616          	                     }
    617            else
    618            {
    619            // Error occurred in request to send.
    620            } 
    621          }
   \   000088   7F06         MOV     R7,#0x6
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57
   \   00000A   41           DB 65
   \   00000B   42           DB 66
   \   00000C   43           DB 67
   \   00000D   44           DB 68
   \   00000E   45           DB 69
   \   00000F   46           DB 70

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " --0x">`:
   \   000000   202D2D30     DB " --0x"
   \            7800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " : ">`:
   \   000000   203A2000     DB " : "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED1_toggle ">`:
   \   000000   4C454431     DB "LED1_toggle "
   \            5F746F67
   \            676C6520
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED2_toggle ">`:
   \   000000   4C454432     DB "LED2_toggle "
   \            5F746F67
   \            676C6520
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DS18b20 DHT11 ">`:
   \   000000   44533138     DB "DS18b20 DHT11 "
   \            62323020
   \            44485431
   \            312000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "--DS18B20 : ">`:
   \   000000   2D2D4453     DB "--DS18B20 : "
   \            31384232
   \            30203A20
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "--DHT11   : ">`:
   \   000000   2D2D4448     DB "--DHT11   : "
   \            54313120
   \            20203A20
   \            00      

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> LED_Initial                   0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     42
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> LED1_toggle                   0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
       -> LED2_toggle                   0      0     60
       -> HalUARTWrite                  0      0     60
       -> HalUARTWrite                  0      0     60
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      1      0     50
       -> Temp_test                     0      0     58
       -> HalUARTWrite                  0      0     58
       -> HalUARTWrite                  0      0     58
       -> HalUARTWrite                  0      0     58
       -> DHT11                         0      0     58
       -> HalUARTWrite                  0      0     58
       -> HalUARTWrite                  0      0     58
       -> HalUARTWrite                  0      0     58
       -> AF_DataRequest                0      0     76
     SampleApp_SerialCMD                0      0     35
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0SEL                                             1
     DS_DHT_flag                                       1
     SampleApp_ClusterList                            12
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     Point_to_Point                                   12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     SampleApp_Init                                  195
     SampleApp_ProcessEvent                          196
     SampleApp_HandleKeys                             62
     ??Subroutine9_0                                   5
     SampleApp_MessageMSGCB                          374
     ?Subroutine4                                     13
     ?Subroutine3                                      4
     ?Subroutine6                                     11
     ?Subroutine7                                     12
     ?Subroutine2                                      7
     ??Subroutine8_0                                  19
     ?Subroutine0                                      3
     ?Subroutine5                                      9
     SampleApp_SendPeriodicMessage                   352
     ?Subroutine1                                      4
     SampleApp_SendFlashMessage                      110
     SampleApp_SerialCMD                             141
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_HandleKeys?relay                      6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleApp_SendPeriodicMessage?relay             6
     ??SampleApp_SendFlashMessage?relay                6
     ??SampleApp_SerialCMD?relay                       6
     ?<Constant "Hello World\n">                      13
     ?<Constant "Group 1">                             8
     ?<Constant "SampleApp">                          10
     ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56   16
     ?<Constant "\n">                                  2
     ?<Constant " --0x">                               6
     ?<Constant " : ">                                 4
     ?<Constant "LED1_toggle ">                       13
     ?<Constant "LED2_toggle ">                       13
     ?<Constant "DS18b20 DHT11 ">                     15
     ?<Constant "--DS18B20 : ">                       13
     ?<Constant "--DHT11   : ">                       13

 
 1 517 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   150 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
 1 559 bytes of CODE  memory
   150 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    66 bytes of XDATA memory

Errors: none
Warnings: 1
