###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         07/Jun/2017  18:23:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\S #
#                          ource\SampleApp.c                                  #
#    Command line       =  -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg    #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\Test\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0         #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\Test\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c -D        #
#                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D           #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\f #
#                          inal\Test\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\  #
#                          -lA D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\EndDeviceEB\List\ --diag_suppress      #
#                          Pe001,Pa010 -o D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test #
#                          \8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\EndDeviceEB\Obj\ -e         #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test #
#                          \8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\Source\ -I               #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\ZMain\TI2530DB\ -I                #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\include\ -I  #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\hal\target\CC253 #
#                          0EB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ #
#                          ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\Components\mac\incl #
#                          ude\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ #
#                          ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sam #
#                          pleApp\CC2530DB\..\..\..\..\..\Components\mac\high #
#                          _level\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢ #
#                          ´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mac\l #
#                          ow_level\srf04\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\ #
#                          Test\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\mac\low_level\srf04\single_chip\ -I             #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\mt\ -I           #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\osal\include\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\services\sadd #
#                          r\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ #
#                          ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\services\s #
#                          data\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´® #
#                          ¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\stack\a #
#                          f\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ #
#                          ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sampl #
#                          eApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\ #
#                           -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´ #
#                          «-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\stack\sapi\  #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\stack\sec\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\stack\sys\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\stack\zdo\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´« #
#                          -´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\zmac\ -I      #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz   #
#                          --require_prototypes                               #
#    List file          =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\EndDeviceEB\List\SampleApp.lst             #
#    Object file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´ò #
#                          ÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\C #
#                          C2530DB\EndDeviceEB\Obj\SampleApp.r51              #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Test\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT.h"
     77          
     78          //Ìí¼Ó LED2 µÄÍ·ÎÄ¼þ
     79          #include  "LED.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   03           DB 3
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135                                    // This variable will be received when
    136                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          
    144          //µã¶ÔµãµØÖ·

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t Point_Adress;
   \                     Point_Adress:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          
    153          /*********************************************************************
    154           * LOCAL FUNCTIONS
    155           */
    156          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    157          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    158          void SampleApp_SendPeriodicMessage( void );
    159          void SampleApp_SendFlashMessage( uint16 flashTime );
    160          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    161          
    162          /*********************************************************************
    163           * NETWORK LAYER CALLBACKS
    164           */
    165          
    166          /*********************************************************************
    167           * PUBLIC FUNCTIONS
    168           */
    169          
    170          /*********************************************************************
    171           * @fn      SampleApp_Init
    172           *
    173           * @brief   Initialization function for the Generic App Task.
    174           *          This is called during initialization and should contain
    175           *          any application specific initialization (ie. hardware
    176           *          initialization/setup, table initialization, power up
    177           *          notificaiton ... ).
    178           *
    179           * @param   task_id - the ID assigned by OSAL.  This ID should be
    180           *                    used to send messages and set timers.
    181           *
    182           * @return  none
    183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    185          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    186            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    187            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    188            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    189            
    190            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    191            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    192            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    193            
    194            LED_Initial();//Â·ÓÉÆ÷ LED2 ³õÊ¼»¯
   \   00002B                ; Setup parameters for call to function LED_Initial
   \   00002B   12....       LCALL   ??LED_Initial?relay
    195            
    196            // Device hardware initialization can be added here or in main() (Zmain.c).
    197            // If the hardware is application specific - add it here.
    198            // If the hardware is other parts of the device add it in main().
    199          
    200           #if defined ( BUILD_ALL_DEVICES )
    201            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    202            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    203            // together - if they are - we will start up a coordinator. Otherwise,
    204            // the device will start as a router.
    205            if ( readCoordinatorJumper() )
    206              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    207            else
    208              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    209          #endif // BUILD_ALL_DEVICES
    210          
    211          #if defined ( HOLD_AUTO_START )
    212            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    213            //  from starting the device and wait for the application to
    214            //  start the device.
    215            ZDOInitDevice(0);
    216          #endif
    217          
    218            // Setup for the periodic message's destination address
    219            // Broadcast to everyone
    220            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000031   740F         MOV     A,#0xf
   \   000033   F0           MOVX    @DPTR,A
    221            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000034   A3           INC     DPTR
   \   000035   7414         MOV     A,#0x14
   \   000037   F0           MOVX    @DPTR,A
    222            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    223          
    224            // Setup for the flash command's destination address - Group 1
    225            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    226            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    227            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    228            
    229            // ÉèÖÃµã¶ÔµãµÄ·¢ËÍÄ£Ê½
    230            Point_Adress.addrMode = (afAddrMode_t)Addr16Bit;
   \   000053   90....       MOV     DPTR,#Point_Adress + 8
   \   000056   7402         MOV     A,#0x2
   \   000058   F0           MOVX    @DPTR,A
    231            Point_Adress.endPoint = SAMPLEAPP_ENDPOINT;
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    232          
    233            // Fill out the endpoint description.
    234            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005D   90....       MOV     DPTR,#SampleApp_epDesc
   \   000060   F0           MOVX    @DPTR,A
    235            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000068   F0           MOVX    @DPTR,A
    236            SampleApp_epDesc.simpleDesc
    237                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000070   F0           MOVX    @DPTR,A
    238            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    239          
    240            // Register the endpoint description with the AF
    241            afRegister( &SampleApp_epDesc );
   \   000074                ; Setup parameters for call to function afRegister
   \   000074   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000076   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000078   12....       LCALL   ??afRegister?relay
    242          
    243            // Register for all key events - This app will handle all key events
    244            RegisterForKeys( SampleApp_TaskID );
   \   00007B                ; Setup parameters for call to function RegisterForKeys
   \   00007B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ??RegisterForKeys?relay
    245          
    246            // By default, all devices start out in Group 1
    247            SampleApp_Group.ID = 0x0001;
   \   000083   90....       MOV     DPTR,#SampleApp_Group
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
    248            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008F   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000092   F5..         MOV     ?V0 + 2,A
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000099   7C07         MOV     R4,#0x7
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009F   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A1   12....       LCALL   ??osal_memcpy?relay
   \   0000A4   7403         MOV     A,#0x3
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    249            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A9                ; Setup parameters for call to function aps_AddGroup
   \   0000A9   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AB   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AD   7914         MOV     R1,#0x14
   \   0000AF   12....       LCALL   ??aps_AddGroup?relay
    250          
    251          #if defined ( LCD_SUPPORTED )
    252            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B2                ; Setup parameters for call to function HalLcdWriteString
   \   0000B2   7901         MOV     R1,#0x1
   \   0000B4   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B6   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B8   12....       LCALL   ??HalLcdWriteString?relay
    253          #endif
    254          }
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    255          
    256          /*********************************************************************
    257           * @fn      SampleApp_ProcessEvent
    258           *
    259           * @brief   Generic Application Task event processor.  This function
    260           *          is called to process all events for the task.  Events
    261           *          include timers, messages and any other user defined events.
    262           *
    263           * @param   task_id  - The OSAL assigned task ID.
    264           * @param   events - events to process.  This is a bit map and can
    265           *                   contain more than one event.
    266           *
    267           * @return  none
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    270          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    271            afIncomingMSGPacket_t *MSGpkt;
    272            (void)task_id;  // Intentionally unreferenced parameter
    273          
    274            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    275            {
    276              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   802B         SJMP    ??SampleApp_ProcessEvent_1
    277              while ( MSGpkt )
    278              {
    279                switch ( MSGpkt->hdr.event )
    280                {
    281                  case CMD_SERIAL_MSG:  //´®¿ÚÊÕµ½Êý¾ÝºóÓÉMT_UART²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬ÓÃÍø·ä·½·¨½ÓÊÕ£¬±àÒëÊ±²»¶¨ÒåMTÏà¹ØÄÚÈÝ 
    282                   SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    283                   break;
    284          
    285                  // Received when a key is pressed
    286                    case KEY_CHANGE:
    287                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    288                    break;
    289          
    290                  // Received when a messages is received (OTA) for this endpoint
    291                  case AF_INCOMING_MSG_CMD:
    292                    SampleApp_MessageMSGCB( MSGpkt );
    293                    break;
    294          
    295                  // Received whenever the device changes state in the network
    296                  case ZDO_STATE_CHANGE:
    297                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    298                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    299                        || (SampleApp_NwkState == DEV_ROUTER)
    300                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6409         XRL     A,#0x9
   \   00001A   600A         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6407         XRL     A,#0x7
   \   00001F   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6406         XRL     A,#0x6
   \   000024   7010         JNZ     ??SampleApp_ProcessEvent_4
    301                    {
    302                      // Start sending the periodic message in a regular interval.
    303                      osal_start_timerEx( SampleApp_TaskID,
    304                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    305                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7C88         MOV     R4,#-0x78
   \   000028   7D13         MOV     R5,#0x13
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay
    306                    }
    307                    else
    308                    {
    309                      // Device is no longer in the network
    310                    }
    311                    break;
    312          
    313                  default:
    314                    break;
    315                }
    316          
    317                // Release the memory
    318                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    319          
    320                // Next - if one is available
    321                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   603E         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   14           DEC     A
   \   000057   600E         JZ      ??SampleApp_ProcessEvent_6
   \   000059   24E7         ADD     A,#-0x19
   \   00005B   6027         JZ      ??SampleApp_ProcessEvent_7
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   600F         JZ      ??SampleApp_ProcessEvent_8
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AD         JZ      ??SampleApp_ProcessEvent_2
   \   000065   80CF         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000067                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_SerialCMD?relay
   \   00006E   80C6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000070                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000082   80B2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000084                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
   \   000088   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00008B   80A9         SJMP    ??SampleApp_ProcessEvent_4
    322              }
    323          
    324              // return unprocessed events
    325              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   000092   FB           MOV     R3,A
   \   000093   802A         SJMP    ??SampleApp_ProcessEvent_10
    326            }
    327          
    328            // Send a message out - This event is generated by a timer
    329            //  (setup in SampleApp_Init()).
    330            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000095   EE           MOV     A,R6
   \   000096   A2E0         MOV     C,0xE0 /* A   */.0
   \   000098   5021         JNC     ??SampleApp_ProcessEvent_11
    331            {
    332              // Send the periodic message
    333              SampleApp_SendPeriodicMessage();
   \   00009A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    334          
    335              // Setup to send message again in normal period (+ a little jitter)
    336              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    337                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00009D                ; Setup parameters for call to function osal_rand
   \   00009D   12....       LCALL   ??osal_rand?relay
   \   0000A0                ; Setup parameters for call to function osal_start_timerEx
   \   0000A0   EA           MOV     A,R2
   \   0000A1   2488         ADD     A,#-0x78
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   3413         ADDC    A,#0x13
   \   0000A7   FD           MOV     R5,A
   \   0000A8   7A01         MOV     R2,#0x1
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??osal_start_timerEx?relay
    338          
    339              // return unprocessed events
    340              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000B4   EE           MOV     A,R6
   \   0000B5   6401         XRL     A,#0x1
   \   0000B7   FA           MOV     R2,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   80D7         SJMP    ??SampleApp_ProcessEvent_9
    341            }
    342          
    343            // Discard unknown events
    344            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BF   7F04         MOV     R7,#0x4
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    345          }
    346          
    347          /*********************************************************************
    348           * Event Generation Functions
    349           */
    350          /*********************************************************************
    351           * @fn      SampleApp_HandleKeys
    352           *
    353           * @brief   Handles all key events for this device.
    354           *
    355           * @param   shift - true if in shift/alt.
    356           * @param   keys - bit field for key events. Valid entries:
    357           *                 HAL_KEY_SW_2
    358           *                 HAL_KEY_SW_1
    359           *
    360           * @return  none
    361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    362          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    363          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    364            (void)shift;  // Intentionally unreferenced parameter
    365            
    366            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    367            {
    368              /* This key sends the Flash Command is sent to Group 1.
    369               * This device will not receive the Flash Command from this
    370               * device (even if it belongs to group 1).
    371               */
    372              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    373            }
    374          
    375            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    376            {
    377              /* The Flashr Command is sent to Group 1.
    378               * This key toggles this device in and out of group 1.
    379               * If this device doesn't belong to group 1, this application
    380               * will not receive the Flash command sent to group 1.
    381               */
    382              aps_Group_t *grp;
    383              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    384              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    385              {
    386                // Remove from the group
    387                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    388              }
    389              else
    390              {
    391                // Add to the flash group
    392                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    393              }
    394            }
    395          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine7_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    396          
    397          /*********************************************************************
    398           * LOCAL FUNCTIONS
    399           */
    400          
    401          /*********************************************************************
    402           * @fn      SampleApp_MessageMSGCB
    403           *
    404           * @brief   Data message processor callback.  This function processes
    405           *          any incoming data - probably from other devices.  So, based
    406           *          on cluster ID, perform the intended action.
    407           *
    408           * @param   none
    409           *
    410           * @return  none
    411           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    413          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    414            uint16 flashTime;
                          ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    415            uint8 ascii[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
   \   00000E   7404         MOV     A,#0x4
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   AC82         MOV     R4,DPL
   \   000015   AD83         MOV     R5,DPH
   \   000017   7583..       MOV     DPH,#(`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` >> 8) & 0xff
   \   00001A   7582..       MOV     DPL,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56` & 0xff
   \   00001D   7410         MOV     A,#0x10
   \   00001F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    416            uint8 led1_over[]=" LED1 Over";
   \   000022   741F         MOV     A,#0x1f
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   AC82         MOV     R4,DPL
   \   000029   AD83         MOV     R5,DPH
   \   00002B   7583..       MOV     DPH,#(`?<Constant " LED1 Over">` >> 8) & 0xff
   \   00002E   7582..       MOV     DPL,#`?<Constant " LED1 Over">` & 0xff
   \   000031   740B         MOV     A,#0xb
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    417            uint8 led2_over[]=" LED2 Over";
   \   000036   7414         MOV     A,#0x14
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AC82         MOV     R4,DPL
   \   00003D   AD83         MOV     R5,DPH
   \   00003F   7583..       MOV     DPH,#(`?<Constant " LED2 Over">` >> 8) & 0xff
   \   000042   7582..       MOV     DPL,#`?<Constant " LED2 Over">` & 0xff
   \   000045   740B         MOV     A,#0xb
   \   000047   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    418            
    419            switch ( pkt->clusterId )
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6403         XRL     A,#0x3
   \   000055   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000059   6003         JZ      $+5
   \   00005B   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    420            {
    421               uint8 i,len,temp[4];
    422               case SAMPLEAPP_COM_CLUSTERID:     //Èç¹ûÊÇ´®¿ÚÍ¸´«µÄÐÅÏ¢
    423                
    424                //±£´æµã¶ÔµãµØÖ·
    425                Point_Adress.addr.shortAddr = pkt->srcAddr.addr.shortAddr;
   \   00005E   EE           MOV     A,R6
   \   00005F   2406         ADD     A,#0x6
   \   000061   F8           MOV     R0,A
   \   000062   EF           MOV     A,R7
   \   000063   3400         ADDC    A,#0x0
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   FA           MOV     R2,A
   \   000068   E9           MOV     A,R1
   \   000069   FB           MOV     R3,A
   \   00006A   8A82         MOV     DPL,R2
   \   00006C   8B83         MOV     DPH,R3
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F8           MOV     R0,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   90....       MOV     DPTR,#Point_Adress
   \   000076   E8           MOV     A,R0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E9           MOV     A,R1
   \   00007A   12....       LCALL   ?Subroutine3 & 0xFFFF
    426                 
    427                //ÏÔÊ¾·¢ËÍ¶ËµÄµØÖ·
    428                temp[0]=ascii[pkt->srcAddr.addr.shortAddr / 0x1000];
   \                     ??CrossCallReturnLabel_2:
   \   00007D   F5..         MOV     ?V0 + 0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 1,A
   \   000083   740C         MOV     A,#0xc
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?US_SHR
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E582         MOV     A,DPL
   \   000091   25..         ADD     A,?V0 + 0
   \   000093   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000096   85..82       MOV     DPL,?XSP + 0
   \   000099   85..83       MOV     DPH,?XSP + 1
   \   00009C   F0           MOVX    @DPTR,A
    429                temp[1]=ascii[pkt->srcAddr.addr.shortAddr % 0x1000 / 0x0100];
   \   00009D   8A82         MOV     DPL,R2
   \   00009F   8B83         MOV     DPH,R3
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E4           CLR     A
   \   0000A5   C9           XCH     A,R1
   \   0000A6   540F         ANL     A,#0xf
   \   0000A8   F8           MOV     R0,A
   \   0000A9   7404         MOV     A,#0x4
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000B1   C0E0         PUSH    A
   \   0000B3   7401         MOV     A,#0x1
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   D0E0         POP     A
   \   0000BA   12....       LCALL   ?Subroutine3 & 0xFFFF
    430                temp[2]=ascii[pkt->srcAddr.addr.shortAddr % 0x0100 / 0x0010];
   \                     ??CrossCallReturnLabel_3:
   \   0000BD   C4           SWAP    A
   \   0000BE   540F         ANL     A,#0xf
   \   0000C0   F8           MOV     R0,A
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000C9   C0E0         PUSH    A
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP     A
   \   0000D2   12....       LCALL   ?Subroutine3 & 0xFFFF
    431                temp[3]=ascii[pkt->srcAddr.addr.shortAddr % 0x0010];
   \                     ??CrossCallReturnLabel_4:
   \   0000D5   540F         ANL     A,#0xf
   \   0000D7   F8           MOV     R0,A
   \   0000D8   7404         MOV     A,#0x4
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000E0   C0E0         PUSH    A
   \   0000E2   7403         MOV     A,#0x3
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   D0E0         POP     A
   \   0000E9   F0           MOVX    @DPTR,A
    432                HalUARTWrite(0," ",1);
   \   0000EA                ; Setup parameters for call to function HalUARTWrite
   \   0000EA   7C01         MOV     R4,#0x1
   \   0000EC   7D00         MOV     R5,#0x0
   \   0000EE   7A..         MOV     R2,#`?<Constant " ">` & 0xff
   \   0000F0   7B..         MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
   \   0000F2   12....       LCALL   ??HalUARTWrite?relay
    433                HalUARTWrite(0,"0x",2);
   \   0000F5                ; Setup parameters for call to function HalUARTWrite
   \   0000F5   7C02         MOV     R4,#0x2
   \   0000F7   7D00         MOV     R5,#0x0
   \   0000F9   7A..         MOV     R2,#`?<Constant "0x">` & 0xff
   \   0000FB   7B..         MOV     R3,#(`?<Constant "0x">` >> 8) & 0xff
   \   0000FD   7900         MOV     R1,#0x0
   \   0000FF   12....       LCALL   ??HalUARTWrite?relay
    434                HalUARTWrite(0,temp,4);
   \   000102                ; Setup parameters for call to function HalUARTWrite
   \   000102   7C04         MOV     R4,#0x4
   \   000104   7D00         MOV     R5,#0x0
   \   000106   85..82       MOV     DPL,?XSP + 0
   \   000109   85..83       MOV     DPH,?XSP + 1
   \   00010C   AA82         MOV     R2,DPL
   \   00010E   AB83         MOV     R3,DPH
   \   000110   7900         MOV     R1,#0x0
   \   000112   12....       LCALL   ??HalUARTWrite?relay
    435                HalUARTWrite(0," :",2);
   \   000115                ; Setup parameters for call to function HalUARTWrite
   \   000115   7C02         MOV     R4,#0x2
   \   000117   7D00         MOV     R5,#0x0
   \   000119   7A..         MOV     R2,#`?<Constant " :">` & 0xff
   \   00011B   7B..         MOV     R3,#(`?<Constant " :">` >> 8) & 0xff
   \   00011D   12....       LCALL   ?Subroutine1 & 0xFFFF
    436                
    437                len=pkt->cmd.Data[0];
   \                     ??CrossCallReturnLabel_0:
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F5..         MOV     ?V0 + 1,A
    438                for(i=0;i<len;i++)
   \   000123   75..00       MOV     ?V0 + 0,#0x0
   \   000126   8021         SJMP    ??SampleApp_MessageMSGCB_2
    439                HalUARTWrite(0,&pkt->cmd.Data[i+1],1);//·¢¸øPC»ú
   \                     ??SampleApp_MessageMSGCB_3:
   \   000128                ; Setup parameters for call to function HalUARTWrite
   \   000128   A8..         MOV     R0,?V0 + 0
   \   00012A   EE           MOV     A,R6
   \   00012B   2422         ADD     A,#0x22
   \   00012D   F582         MOV     DPL,A
   \   00012F   EF           MOV     A,R7
   \   000130   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000133   28           ADD     A,R0
   \   000134   FA           MOV     R2,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   3400         ADDC    A,#0x0
   \   000139   8A82         MOV     DPL,R2
   \   00013B   F583         MOV     DPH,A
   \   00013D   A3           INC     DPTR
   \   00013E   AA82         MOV     R2,DPL
   \   000140   AB83         MOV     R3,DPH
   \   000142   7900         MOV     R1,#0x0
   \   000144   12....       LCALL   ??HalUARTWrite?relay
   \   000147   05..         INC     ?V0 + 0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000149   E5..         MOV     A,?V0 + 0
   \   00014B   C3           CLR     C
   \   00014C   95..         SUBB    A,?V0 + 1
   \   00014E   7C01         MOV     R4,#0x1
   \   000150   7D00         MOV     R5,#0x0
   \   000152   40D4         JC      ??SampleApp_MessageMSGCB_3
    440                HalUARTWrite(0," ",1);               // »Ø³µ»»ÐÐ
   \   000154                ; Setup parameters for call to function HalUARTWrite
   \   000154   7A..         MOV     R2,#`?<Constant " ">` & 0xff
   \   000156   7B..         MOV     R3,#(`?<Constant " ">` >> 8) & 0xff
   \   000158   12....       LCALL   ?Subroutine1 & 0xFFFF
    441                
    442                // µ±ÊÕµ½×Ö·û '1' Ê±£¬Ïò·¢ËÍ¶Ë·µ»Ø×Ö·û´® "Over!"
    443                if(pkt->cmd.Data[1]=='1')
   \                     ??CrossCallReturnLabel_1:
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   6431         XRL     A,#0x31
   \   00015F   703F         JNZ     ??SampleApp_MessageMSGCB_4
    444                {
    445                  if ( AF_DataRequest( &Point_Adress, &SampleApp_epDesc,
    446                                      SAMPLEAPP_COM_CLUSTERID,
    447                                      11,
    448                                      led1_over,
    449                                      &SampleApp_TransID,
    450                                      AF_DISCV_ROUTE,
    451                                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000161                ; Setup parameters for call to function AF_DataRequest
   \   000161   75..1E       MOV     ?V0 + 0,#0x1e
   \   000164   78..         MOV     R0,#?V0 + 0
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000169   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00016C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00016F   78..         MOV     R0,#?V0 + 0
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000174   7422         MOV     A,#0x22
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   8582..       MOV     ?V0 + 0,DPL
   \   00017C   8583..       MOV     ?V0 + 1,DPH
   \   00017F   78..         MOV     R0,#?V0 + 0
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000184   75..0B       MOV     ?V0 + 0,#0xb
   \   000187   75..00       MOV     ?V0 + 1,#0x0
   \   00018A   78..         MOV     R0,#?V0 + 0
   \   00018C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018F   75..03       MOV     ?V0 + 0,#0x3
   \   000192   78..         MOV     R0,#?V0 + 0
   \   000194   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000197   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00019A   12....       LCALL   ?DEALLOC_XSTACK8
    452                  {
    453                  }
    454                  else
    455                  {
    456                    // Error occurred in request to send.
    457                  }
    458                  LED1_toggle();
   \   00019D                ; Setup parameters for call to function LED1_toggle
   \   00019D   12....       LCALL   ??LED1_toggle?relay
    459                }
    460                
    461                if(pkt->cmd.Data[1]=='2')
   \                     ??SampleApp_MessageMSGCB_4:
   \   0001A0   EE           MOV     A,R6
   \   0001A1   2422         ADD     A,#0x22
   \   0001A3   F582         MOV     DPL,A
   \   0001A5   EF           MOV     A,R7
   \   0001A6   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001A9   F8           MOV     R0,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   F583         MOV     DPH,A
   \   0001AE   8882         MOV     DPL,R0
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   6432         XRL     A,#0x32
   \   0001B4   703F         JNZ     ??SampleApp_MessageMSGCB_1
    462                {
    463                  if ( AF_DataRequest( &Point_Adress, &SampleApp_epDesc,
    464                                      SAMPLEAPP_COM_CLUSTERID,
    465                                      11,
    466                                      led2_over,
    467                                      &SampleApp_TransID,
    468                                      AF_DISCV_ROUTE,
    469                                      AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0001B6                ; Setup parameters for call to function AF_DataRequest
   \   0001B6   75..1E       MOV     ?V0 + 0,#0x1e
   \   0001B9   78..         MOV     R0,#?V0 + 0
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001BE   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0001C1   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0001C4   78..         MOV     R0,#?V0 + 0
   \   0001C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C9   7417         MOV     A,#0x17
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   8582..       MOV     ?V0 + 0,DPL
   \   0001D1   8583..       MOV     ?V0 + 1,DPH
   \   0001D4   78..         MOV     R0,#?V0 + 0
   \   0001D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D9   75..0B       MOV     ?V0 + 0,#0xb
   \   0001DC   75..00       MOV     ?V0 + 1,#0x0
   \   0001DF   78..         MOV     R0,#?V0 + 0
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E4   75..03       MOV     ?V0 + 0,#0x3
   \   0001E7   78..         MOV     R0,#?V0 + 0
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EC   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
    470                  {
    471                  }
    472                  else
    473                  {
    474                    // Error occurred in request to send.
    475                  }
    476                  LED2_toggle();
   \   0001F2                ; Setup parameters for call to function LED2_toggle
   \   0001F2   12....       LCALL   ??LED2_toggle?relay
    477                }
    478                
    479                break;
    480           
    481          
    482          
    483              /*case SAMPLEAPP_PERIODIC_CLUSTERID:
    484                
    485                break;
    486          
    487              case SAMPLEAPP_FLASH_CLUSTERID:
    488                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    489                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    490                break;*/
    491            }
    492          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   0001F5   742A         MOV     A,#0x2a
   \   0001F7   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003                REQUIRE ??Subroutine5_0
   \   000003                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7900         MOV     R1,#0x0
   \   000002   12....       LCALL   ??HalUARTWrite?relay
   \   000005   EE           MOV     A,R6
   \   000006   2422         ADD     A,#0x22
   \   000008   F582         MOV     DPL,A
   \   00000A   EF           MOV     A,R7
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8882         MOV     DPL,R0
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV     R2,#Point_Adress & 0xff
   \   000008   7B..         MOV     R3,#(Point_Adress >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine8_0
   \   00000A                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    493          
    494          /*********************************************************************
    495           * @fn      SampleApp_SendPeriodicMessage
    496           *
    497           * @brief   Send the periodic message.
    498           *
    499           * @param   none
    500           *
    501           * @return  none
    502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    504          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    505            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    506                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    507                                 1,
    508                                 (uint8*)&SampleAppPeriodicCounter,
    509                                 &SampleApp_TransID,
    510                                 AF_DISCV_ROUTE,
    511                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000040   80..         SJMP    ?Subroutine0
    512            {
    513            }
    514            else
    515            {
    516              // Error occurred in request to send.
    517            }
    518          }
    519          
    520          /*********************************************************************
    521           * @fn      SampleApp_SendFlashMessage
    522           *
    523           * @brief   Send the flash message to group 1.
    524           *
    525           * @param   flashTime - in milliseconds
    526           *
    527           * @return  none
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    530          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    531            uint8 buffer[3];
    532            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    533            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    534            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    535          
    536            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    537                                 SAMPLEAPP_FLASH_CLUSTERID,
    538                                 3,
    539                                 buffer,
    540                                 &SampleApp_TransID,
    541                                 AF_DISCV_ROUTE,
    542                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    543            {
    544            }
    545            else
    546            {
    547              // Error occurred in request to send.
    548            }
    549          }
   \   00006F   7403         MOV     A,#0x3
   \   000071                REQUIRE ?Subroutine0
   \   000071                ; // Fall through to label ?Subroutine0
    550          
    551          /*********************************************************************
    552          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    554          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    555            uint8 i,len,*str=NULL;     //lenÓÐÓÃÊý¾Ý³¤¶È
    556            str=cmdMsg->msg;          //Ö¸ÏòÊý¾Ý¿ªÍ·
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 1,A
    557            len=*str;                 //msgÀïµÄµÚ1¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
    558          
    559            /********´òÓ¡³ö´®¿Ú½ÓÊÕµ½µÄÊý¾Ý£¬ÓÃÓÚÌáÊ¾*********/
    560          
    561            for(i=1;i<=len;i++)
   \   00001A   7E01         MOV     R6,#0x1
   \   00001C   8012         SJMP    ??SampleApp_SerialCMD_0
    562            HalUARTWrite(0,str+i,1 ); 
   \                     ??SampleApp_SerialCMD_1:
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   8E..         MOV     ?V0 + 4,R6
   \   000020   E5..         MOV     A,?V0 + 0
   \   000022   25..         ADD     A,?V0 + 4
   \   000024   FA           MOV     R2,A
   \   000025   E5..         MOV     A,?V0 + 1
   \   000027   3400         ADDC    A,#0x0
   \   000029   FB           MOV     R3,A
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   12....       LCALL   ??HalUARTWrite?relay
   \   00002F   0E           INC     R6
   \                     ??SampleApp_SerialCMD_0:
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   9E           SUBB    A,R6
   \   000034   7C01         MOV     R4,#0x1
   \   000036   7D00         MOV     R5,#0x0
   \   000038   50E4         JNC     ??SampleApp_SerialCMD_1
    563            HalUARTWrite(0,"\n",1 );//»»ÐÐ  
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00003C   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00003E   7900         MOV     R1,#0x0
   \   000040   12....       LCALL   ??HalUARTWrite?relay
    564          
    565            /*******·¢ËÍ³öÈ¥***²Î¿¼Íø·ä 1Ð¡Ê±ÎÞÏßÊý¾Ý´«Êä½Ì³Ì*********/
    566          
    567            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    568          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    569          	                    len+1,                  // Êý¾Ý³¤¶È         
    570                                      str,                     //Êý¾ÝÄÚÈÝ
    571          	                    &SampleApp_TransID, 
    572          	                    AF_DISCV_ROUTE,
    573          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000043                ; Setup parameters for call to function AF_DataRequest
   \   000043   75..1E       MOV     ?V0 + 3,#0x1e
   \   000046   78..         MOV     R0,#?V0 + 3
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   75....       MOV     ?V0 + 4,#SampleApp_TransID & 0xff
   \   00004E   75....       MOV     ?V0 + 5,#(SampleApp_TransID >> 8) & 0xff
   \   000051   78..         MOV     R0,#?V0 + 4
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   E5..         MOV     A,?V0 + 2
   \   00005D   2401         ADD     A,#0x1
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   E4           CLR     A
   \   000062   3400         ADDC    A,#0x0
   \   000064   F5..         MOV     ?V0 + 1,A
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   75..03       MOV     ?V0 + 0,#0x3
   \   00006E   75..00       MOV     ?V0 + 1,#0x0
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   7920         MOV     R1,#0x20
   \   000078   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00007A   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00007C   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00007E   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000080   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
    574          	                     {
    575          	                     }
    576            else
    577            {
    578            // Error occurred in request to send.
    579            } 
    580          }
   \   000086   7F06         MOV     R7,#0x6
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57
   \   00000A   41           DB 65
   \   00000B   42           DB 66
   \   00000C   43           DB 67
   \   00000D   44           DB 68
   \   00000E   45           DB 69
   \   00000F   46           DB 70

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " LED1 Over">`:
   \   000000   204C4544     DB " LED1 Over"
   \            31204F76
   \            657200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " LED2 Over">`:
   \   000000   204C4544     DB " LED2 Over"
   \            32204F76
   \            657200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0x">`:
   \   000000   307800       DB "0x"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " :">`:
   \   000000   203A00       DB " :"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> LED_Initial                   0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     73
       -> HalUARTWrite                  0      0    104
       -> HalUARTWrite                  0      0    104
       -> HalUARTWrite                  0      0    104
       -> HalUARTWrite                  0      0    104
       -> HalUARTWrite                  0      0    104
       -> HalUARTWrite                  0      0    104
       -> AF_DataRequest                0      0    122
       -> LED1_toggle                   0      0    104
       -> AF_DataRequest                0      0    122
       -> LED2_toggle                   0      0    104
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SampleApp_SerialCMD                0      0     35
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     SampleApp_ClusterList                             6
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     Point_Adress                                     12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     SampleApp_Init                                  192
     SampleApp_ProcessEvent                          196
     SampleApp_HandleKeys                             62
     ??Subroutine7_0                                   5
     SampleApp_MessageMSGCB                          506
     ?Subroutine3                                      7
     ?Subroutine2                                      3
     ??Subroutine5_0                                   4
     ??Subroutine6_0                                   6
     ?Subroutine1                                     24
     ?Subroutine0                                      3
     ?Subroutine4                                     10
     ??Subroutine8_0                                   6
     SampleApp_SendPeriodicMessage                    66
     SampleApp_SendFlashMessage                      113
     SampleApp_SerialCMD                             139
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_HandleKeys?relay                      6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleApp_SendPeriodicMessage?relay             6
     ??SampleApp_SendFlashMessage?relay                6
     ??SampleApp_SerialCMD?relay                       6
     ?<Constant "Hello World\n">                      13
     ?<Constant "Group 1">                             8
     ?<Constant "SampleApp">                          10
     ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56   16
     ?<Constant " LED1 Over">                         11
     ?<Constant " LED2 Over">                         11
     ?<Constant " ">                                   2
     ?<Constant "0x">                                  3
     ?<Constant " :">                                  3
     ?<Constant "\n">                                  2

 
 1 342 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    97 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 384 bytes of CODE  memory
    97 bytes of CONST memory
    65 bytes of XDATA memory

Errors: none
Warnings: 1
