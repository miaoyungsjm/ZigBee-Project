###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         14/Jun/2017  20:18:48 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \Source\SampleApp.c                                #
#    Command line       =  -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg  #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg #
#                           (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFAA                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\z #
#                          stack\Samples\SampleApp\Source\SampleApp.c -D      #
#                          POWER_SAVING -D NV_RESTORE -D ZTOOL_P1 -D          #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\f #
#                          inal\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Li #
#                          st\ -lA D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´ #
#                          ®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\CoordinatorEB\List\              #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\CoordinatorEB\Obj\ -e --no_code_motion   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­ #
#                          µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\Source\ -I           #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\ZMain\TI2530DB\ -I              #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\hal\include\   #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\hal\target\ #
#                          CC2530EB\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷ #
#                          \8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\Components\m #
#                          ac\include\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷ #
#                          Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\high_level\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final #
#                          \Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\low_level\srf04\ -I                      #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\mac\low_level\ #
#                          srf04\single_chip\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fin #
#                          al\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com #
#                          ponents\mt\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷ #
#                          Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Sa #
#                          mples\SampleApp\CC2530DB\..\..\..\..\..\Components #
#                          \osal\include\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð #
#                          ­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone #
#                          nts\services\saddr\ -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\fi #
#                          nal\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co #
#                          mponents\services\sdata\ -I                        #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\stack\af\ -I   #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\stack\nwk\ -I  #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\stack\sapi\    #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\stack\sec\  #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\stack\sys\  #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\stack\zdo\  #
#                          -I D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸ #
#                          ´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\Sample #
#                          App\CC2530DB\..\..\..\..\..\Components\zmac\ -I    #
#                          D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\zmac\f8w\      #
#                          -Ohz --require_prototypes                          #
#    List file          =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\CoordinatorEB\List\SampleApp.lst         #
#    Object file        =  D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«- #
#                          ´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\CoordinatorEB\Obj\SampleApp.r51          #
#                                                                             #
#                                                                             #
###############################################################################

D:\ÎÞÏß´«¸ÐÍøÂç\¿Î³ÌÉè¼Æ\final\Ð­µ÷Æ÷\8¡¢´®¿ÚÍ¸´«-´òÔìÎÞÏß´®¿ÚÄ£¿é\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT.h"
     77          
     78          //Ìí¼Ó LED2 µÄÍ·ÎÄ¼þ
     79          #include  "LED.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135                                    // This variable will be received when
    136                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    143          
    144          // µã¶ÔµãµØÖ·

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t Point_to_Point;
   \                     Point_to_Point:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          
    147          // ½¨Á¢Ò»¸ö¼ÇÂ¼·Ö»ú¶ÌµØÖ·Êý¾Ý½á¹¹µÄÒ»Î¬Êý×é Adress[3]

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint16 Adress[3];
   \                     Adress:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          
    155          /*********************************************************************
    156           * LOCAL FUNCTIONS
    157           */
    158          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    159          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    160          void SampleApp_SendPeriodicMessage( void );
    161          void SampleApp_SendFlashMessage( uint16 flashTime );
    162          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg);
    163          
    164          /*********************************************************************
    165           * NETWORK LAYER CALLBACKS
    166           */
    167          
    168          /*********************************************************************
    169           * PUBLIC FUNCTIONS
    170           */
    171          
    172          /*********************************************************************
    173           * @fn      SampleApp_Init
    174           *
    175           * @brief   Initialization function for the Generic App Task.
    176           *          This is called during initialization and should contain
    177           *          any application specific initialization (ie. hardware
    178           *          initialization/setup, table initialization, power up
    179           *          notificaiton ... ).
    180           *
    181           * @param   task_id - the ID assigned by OSAL.  This ID should be
    182           *                    used to send messages and set timers.
    183           *
    184           * @return  none
    185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    187          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    188            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    189            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    190            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    191            
    192            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    193            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    194            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    195            
    196            LED_Initial();// LED ³õÊ¼»¯
   \   00002B                ; Setup parameters for call to function LED_Initial
   \   00002B   12....       LCALL   ??LED_Initial?relay
    197            
    198            // Device hardware initialization can be added here or in main() (Zmain.c).
    199            // If the hardware is application specific - add it here.
    200            // If the hardware is other parts of the device add it in main().
    201          
    202           #if defined ( BUILD_ALL_DEVICES )
    203            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    204            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    205            // together - if they are - we will start up a coordinator. Otherwise,
    206            // the device will start as a router.
    207            if ( readCoordinatorJumper() )
    208              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    209            else
    210              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    211          #endif // BUILD_ALL_DEVICES
    212          
    213          #if defined ( HOLD_AUTO_START )
    214            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    215            //  from starting the device and wait for the application to
    216            //  start the device.
    217            ZDOInitDevice(0);
    218          #endif
    219          
    220            // Setup for the periodic message's destination address
    221            // Broadcast to everyone
    222            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000031   740F         MOV     A,#0xf
   \   000033   F0           MOVX    @DPTR,A
    223            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000034   A3           INC     DPTR
   \   000035   7414         MOV     A,#0x14
   \   000037   F0           MOVX    @DPTR,A
    224            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    225          
    226            // Setup for the flash command's destination address - Group 1
    227            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
    228            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC     DPTR
   \   000047   7414         MOV     A,#0x14
   \   000049   F0           MOVX    @DPTR,A
    229            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    230            
    231            // µã¶ÔµãµÄ·¢ËÍÄ£Ê½
    232            Point_to_Point.addrMode = (afAddrMode_t)Addr16Bit;
   \   000053   90....       MOV     DPTR,#Point_to_Point + 8
   \   000056   7402         MOV     A,#0x2
   \   000058   F0           MOVX    @DPTR,A
    233            Point_to_Point.endPoint = SAMPLEAPP_ENDPOINT;
   \   000059   A3           INC     DPTR
   \   00005A   7414         MOV     A,#0x14
   \   00005C   F0           MOVX    @DPTR,A
    234            //Point_to_Point.addr.shortAddr = 0x????;
    235          
    236            // Fill out the endpoint description.
    237            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005D   90....       MOV     DPTR,#SampleApp_epDesc
   \   000060   F0           MOVX    @DPTR,A
    238            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000068   F0           MOVX    @DPTR,A
    239            SampleApp_epDesc.simpleDesc
    240                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000069   A3           INC     DPTR
   \   00006A   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000070   F0           MOVX    @DPTR,A
    241            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000071   A3           INC     DPTR
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    242          
    243            // Register the endpoint description with the AF
    244            afRegister( &SampleApp_epDesc );
   \   000074                ; Setup parameters for call to function afRegister
   \   000074   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000076   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000078   12....       LCALL   ??afRegister?relay
    245          
    246            // Register for all key events - This app will handle all key events
    247            RegisterForKeys( SampleApp_TaskID );
   \   00007B                ; Setup parameters for call to function RegisterForKeys
   \   00007B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ??RegisterForKeys?relay
    248          
    249            // By default, all devices start out in Group 1
    250            SampleApp_Group.ID = 0x0001;
   \   000083   90....       MOV     DPTR,#SampleApp_Group
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
    251            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008F   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000092   F5..         MOV     ?V0 + 2,A
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000099   7C07         MOV     R4,#0x7
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009F   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A1   12....       LCALL   ??osal_memcpy?relay
   \   0000A4   7403         MOV     A,#0x3
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    252            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A9                ; Setup parameters for call to function aps_AddGroup
   \   0000A9   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AB   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AD   7914         MOV     R1,#0x14
   \   0000AF   12....       LCALL   ??aps_AddGroup?relay
    253          
    254          #if defined ( LCD_SUPPORTED )
    255            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B2                ; Setup parameters for call to function HalLcdWriteString
   \   0000B2   7901         MOV     R1,#0x1
   \   0000B4   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B6   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B8   12....       LCALL   ??HalLcdWriteString?relay
    256          #endif
    257          }
   \   0000BB   7F03         MOV     R7,#0x3
   \   0000BD   02....       LJMP    ?BANKED_LEAVE_XDATA
    258          
    259          /*********************************************************************
    260           * @fn      SampleApp_ProcessEvent
    261           *
    262           * @brief   Generic Application Task event processor.  This function
    263           *          is called to process all events for the task.  Events
    264           *          include timers, messages and any other user defined events.
    265           *
    266           * @param   task_id  - The OSAL assigned task ID.
    267           * @param   events - events to process.  This is a bit map and can
    268           *                   contain more than one event.
    269           *
    270           * @return  none
    271           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    272          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    273          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    274            afIncomingMSGPacket_t *MSGpkt;
    275            (void)task_id;  // Intentionally unreferenced parameter
    276          
    277            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    278            {
    279              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   802B         SJMP    ??SampleApp_ProcessEvent_1
    280              while ( MSGpkt )
    281              {
    282                switch ( MSGpkt->hdr.event )
    283                {
    284                  case CMD_SERIAL_MSG:  //´®¿ÚÊÕµ½Êý¾ÝºóÓÉMT_UART²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬ÓÃÍø·ä·½·¨½ÓÊÕ£¬±àÒëÊ±²»¶¨ÒåMTÏà¹ØÄÚÈÝ 
    285                   SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    286                   break;
    287          
    288                  // Received when a key is pressed
    289                    case KEY_CHANGE:
    290                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    291                    break;
    292          
    293                  // Received when a messages is received (OTA) for this endpoint
    294                  case AF_INCOMING_MSG_CMD:
    295                    SampleApp_MessageMSGCB( MSGpkt );
    296                    break;
    297          
    298                  // Received whenever the device changes state in the network
    299                  case ZDO_STATE_CHANGE:
    300                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#SampleApp_NwkState
   \   000017   F0           MOVX    @DPTR,A
    301                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    302                        || (SampleApp_NwkState == DEV_ROUTER)
    303                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000018   6409         XRL     A,#0x9
   \   00001A   600A         JZ      ??SampleApp_ProcessEvent_3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6407         XRL     A,#0x7
   \   00001F   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6406         XRL     A,#0x6
   \   000024   7010         JNZ     ??SampleApp_ProcessEvent_4
    304                    {
    305                      // Start sending the periodic message in a regular interval.
    306                      osal_start_timerEx( SampleApp_TaskID,
    307                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    308                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function osal_start_timerEx
   \   000026   7C88         MOV     R4,#-0x78
   \   000028   7D13         MOV     R5,#0x13
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_start_timerEx?relay
    309                    }
    310                    else
    311                    {
    312                      // Device is no longer in the network
    313                    }
    314                    break;
    315          
    316                  default:
    317                    break;
    318                }
    319          
    320                // Release the memory
    321                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000036                ; Setup parameters for call to function osal_msg_deallocate
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??osal_msg_deallocate?relay
    322          
    323                // Next - if one is available
    324                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_receive?relay
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   \   000049   E5..         MOV     A,?V0 + 0
   \   00004B   45..         ORL     A,?V0 + 1
   \   00004D   603E         JZ      ??SampleApp_ProcessEvent_5
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   14           DEC     A
   \   000057   600E         JZ      ??SampleApp_ProcessEvent_6
   \   000059   24E7         ADD     A,#-0x19
   \   00005B   6027         JZ      ??SampleApp_ProcessEvent_7
   \   00005D   245A         ADD     A,#0x5a
   \   00005F   600F         JZ      ??SampleApp_ProcessEvent_8
   \   000061   24EF         ADD     A,#-0x11
   \   000063   60AD         JZ      ??SampleApp_ProcessEvent_2
   \   000065   80CF         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000067                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??SampleApp_SerialCMD?relay
   \   00006E   80C6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_8:
   \   000070                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FA           MOV     R2,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000082   80B2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000084                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000084   AA..         MOV     R2,?V0 + 0
   \   000086   AB..         MOV     R3,?V0 + 1
   \   000088   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00008B   80A9         SJMP    ??SampleApp_ProcessEvent_4
    325              }
    326          
    327              // return unprocessed events
    328              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00008D   EE           MOV     A,R6
   \   00008E   FA           MOV     R2,A
   \   00008F   EF           MOV     A,R7
   \   000090   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_9:
   \   000092   FB           MOV     R3,A
   \   000093   802A         SJMP    ??SampleApp_ProcessEvent_10
    329            }
    330          
    331            // Send a message out - This event is generated by a timer
    332            //  (setup in SampleApp_Init()).
    333            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000095   EE           MOV     A,R6
   \   000096   A2E0         MOV     C,0xE0 /* A   */.0
   \   000098   5021         JNC     ??SampleApp_ProcessEvent_11
    334            {
    335              // Send the periodic message
    336              SampleApp_SendPeriodicMessage();
   \   00009A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00009A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    337          
    338              // Setup to send message again in normal period (+ a little jitter)
    339              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    340                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00009D                ; Setup parameters for call to function osal_rand
   \   00009D   12....       LCALL   ??osal_rand?relay
   \   0000A0                ; Setup parameters for call to function osal_start_timerEx
   \   0000A0   EA           MOV     A,R2
   \   0000A1   2488         ADD     A,#-0x78
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E4           CLR     A
   \   0000A5   3413         ADDC    A,#0x13
   \   0000A7   FD           MOV     R5,A
   \   0000A8   7A01         MOV     R2,#0x1
   \   0000AA   7B00         MOV     R3,#0x0
   \   0000AC   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??osal_start_timerEx?relay
    341          
    342              // return unprocessed events
    343              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000B4   EE           MOV     A,R6
   \   0000B5   6401         XRL     A,#0x1
   \   0000B7   FA           MOV     R2,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   80D7         SJMP    ??SampleApp_ProcessEvent_9
    344            }
    345          
    346            // Discard unknown events
    347            return 0;
   \                     ??SampleApp_ProcessEvent_11:
   \   0000BB   7A00         MOV     R2,#0x0
   \   0000BD   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000BF   7F04         MOV     R7,#0x4
   \   0000C1   02....       LJMP    ?BANKED_LEAVE_XDATA
    348          }
    349          
    350          /*********************************************************************
    351           * Event Generation Functions
    352           */
    353          /*********************************************************************
    354           * @fn      SampleApp_HandleKeys
    355           *
    356           * @brief   Handles all key events for this device.
    357           *
    358           * @param   shift - true if in shift/alt.
    359           * @param   keys - bit field for key events. Valid entries:
    360           *                 HAL_KEY_SW_2
    361           *                 HAL_KEY_SW_1
    362           *
    363           * @return  none
    364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    365          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    366          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    367            (void)shift;  // Intentionally unreferenced parameter
    368            
    369            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    370            {
    371              /* This key sends the Flash Command is sent to Group 1.
    372               * This device will not receive the Flash Command from this
    373               * device (even if it belongs to group 1).
    374               */
    375              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    376            }
    377          
    378            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    379            {
    380              /* The Flashr Command is sent to Group 1.
    381               * This key toggles this device in and out of group 1.
    382               * If this device doesn't belong to group 1, this application
    383               * will not receive the Flash command sent to group 1.
    384               */
    385              aps_Group_t *grp;
    386              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    387              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    388              {
    389                // Remove from the group
    390                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    391              }
    392              else
    393              {
    394                // Add to the flash group
    395                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    396              }
    397            }
    398          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    399          
    400          /*********************************************************************
    401           * LOCAL FUNCTIONS
    402           */
    403          
    404          /*********************************************************************
    405           * @fn      SampleApp_MessageMSGCB
    406           *
    407           * @brief   Data message processor callback.  This function processes
    408           *          any incoming data - probably from other devices.  So, based
    409           *          on cluster ID, perform the intended action.
    410           *
    411           * @param   none
    412           *
    413           * @return  none
    414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    416          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    417            uint16 flashTime;
                          ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    418          
    419            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0300         DW        3
   \   00001F   03           DB        3
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
   \   000026   ....         DW        ??SampleApp_MessageMSGCB_3
   \   000028   ....         DW        ??SampleApp_MessageMSGCB_4
    420            {
    421               uint8 i,len;
    422               case SAMPLEAPP_COM_CLUSTERID:     //Èç¹ûÊÇ´®¿ÚÍ¸´«µÄÐÅÏ¢
    423                len=pkt->cmd.Data[0];
   \                     ??SampleApp_MessageMSGCB_1:
   \   00002A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00002D   F5..         MOV     ?V0 + 1,A
    424                for(i=0;i<len;i++)
   \   00002F   75..00       MOV     ?V0 + 0,#0x0
   \   000032   801B         SJMP    ??SampleApp_MessageMSGCB_5
    425                HalUARTWrite(0,&pkt->cmd.Data[i+1],1);//·¢¸øPC»ú
   \                     ??SampleApp_MessageMSGCB_6:
   \   000034                ; Setup parameters for call to function HalUARTWrite
   \   000034   A8..         MOV     R0,?V0 + 0
   \   000036   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000039   28           ADD     A,R0
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   8A82         MOV     DPL,R2
   \   000041   F583         MOV     DPH,A
   \   000043   A3           INC     DPTR
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   7900         MOV     R1,#0x0
   \   00004A   12....       LCALL   ??HalUARTWrite?relay
   \   00004D   05..         INC     ?V0 + 0
   \                     ??SampleApp_MessageMSGCB_5:
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   C3           CLR     C
   \   000052   95..         SUBB    A,?V0 + 1
   \   000054   7C01         MOV     R4,#0x1
   \   000056   7D00         MOV     R5,#0x0
   \   000058   40DA         JC      ??SampleApp_MessageMSGCB_6
    426                HalUARTWrite(0,"\n",1);               // »Ø³µ»»ÐÐ 
   \   00005A                ; Setup parameters for call to function HalUARTWrite
   \   00005A   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   00005C   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_7:
   \   00005E   7900         MOV     R1,#0x0
   \   000060   12....       LCALL   ??HalUARTWrite?relay
    427                break;
   \   000063   8033         SJMP    ??SampleApp_MessageMSGCB_0
    428            
    429               case End1:
    430                 Adress[0] = pkt->srcAddr.addr.shortAddr;
   \                     ??SampleApp_MessageMSGCB_2:
   \   000065   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000068   90....       MOV     DPTR,#Adress
   \   00006B   8026         SJMP    ??SampleApp_MessageMSGCB_8
    431                 break;
    432                 
    433               case End2:
    434                 Adress[1] = pkt->srcAddr.addr.shortAddr;
   \                     ??SampleApp_MessageMSGCB_3:
   \   00006D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000070   90....       MOV     DPTR,#Adress + 2
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
    435                 len=pkt->cmd.Data[0];
    436                 if(len>2)
   \   000078   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   4018         JC      ??SampleApp_MessageMSGCB_0
    437                 {
    438                   //HalUARTWrite(0,"Temp0 Temp1 Humidity : ",23);        //ÌáÊ¾½ÓÊÕµ½Êý¾Ý
    439                   HalUARTWrite(0,&pkt->cmd.Data[0],6); //ASCIIÂë·¢¸øPC»ú
   \   000080                ; Setup parameters for call to function HalUARTWrite
   \   000080   7C06         MOV     R4,#0x6
   \   000082   7D00         MOV     R5,#0x0
   \   000084   12....       LCALL   ?Subroutine3 & 0xFFFF
    440                   //HalUARTWrite(0,"\n",1);              // »Ø³µ»»ÐÐ
    441                 }
   \                     ??CrossCallReturnLabel_6:
   \   000087   FA           MOV     R2,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FB           MOV     R3,A
   \   00008B   80D1         SJMP    ??SampleApp_MessageMSGCB_7
    442                 break;
    443                 
    444               case End3:
    445                 Adress[2] = pkt->srcAddr.addr.shortAddr;
   \                     ??SampleApp_MessageMSGCB_4:
   \   00008D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000090   90....       MOV     DPTR,#Adress + 4
   \                     ??SampleApp_MessageMSGCB_8:
   \   000093   E8           MOV     A,R0
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E9           MOV     A,R1
   \   000097   F0           MOVX    @DPTR,A
    446                 break;
    447          
    448          
    449              /*case SAMPLEAPP_PERIODIC_CLUSTERID:
    450                
    451                break;
    452          
    453              case SAMPLEAPP_FLASH_CLUSTERID:
    454                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    455                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    456                break;*/
    457            }
    458          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000098   02....       LJMP    ??Subroutine8_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine9_0
   \   000008                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    459          
    460          /*********************************************************************
    461           * @fn      SampleApp_SendPeriodicMessage
    462           *
    463           * @brief   Send the periodic message.
    464           *
    465           * @param   none
    466           *
    467           * @return  none
    468           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine8_0
   \   000003                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    469          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    470          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    471            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    472                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    473                                 1,
    474                                 (uint8*)&SampleAppPeriodicCounter,
    475                                 &SampleApp_TransID,
    476                                 AF_DISCV_ROUTE,
    477                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000040   02....       LJMP    ?Subroutine0 & 0xFFFF
    478            {
    479            }
    480            else
    481            {
    482              // Error occurred in request to send.
    483            }
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   12....       LCALL   ??AF_DataRequest?relay
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn      SampleApp_SendFlashMessage
    488           *
    489           * @brief   Send the flash message to group 1.
    490           *
    491           * @param   flashTime - in milliseconds
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    496          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    497            uint8 buffer[3];
    498            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    499            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    500            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    501          
    502            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    503                                 SAMPLEAPP_FLASH_CLUSTERID,
    504                                 3,
    505                                 buffer,
    506                                 &SampleApp_TransID,
    507                                 AF_DISCV_ROUTE,
    508                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    509            {
    510            }
    511            else
    512            {
    513              // Error occurred in request to send.
    514            }
    515          }
   \   00006F   7403         MOV     A,#0x3
   \   000071   02....       LJMP    ?Subroutine0 & 0xFFFF
    516          
    517          /*********************************************************************
    518          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7920         MOV     R1,#0x20
   \   000002   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV     R2,#Point_to_Point & 0xff
   \   000008   7B..         MOV     R3,#(Point_to_Point >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine10_0
   \   00000A                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    520          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    521            uint8 i,len,*str=NULL;     //lenÓÐÓÃÊý¾Ý³¤¶È
    522            str=cmdMsg->msg;          //Ö¸ÏòÊý¾Ý¿ªÍ·
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00000C   88..         MOV     ?V0 + 2,R0
   \   00000E   89..         MOV     ?V0 + 3,R1
    523            len=*str;                 //msgÀïµÄµÚ1¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
   \   000010   8882         MOV     DPL,R0
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
    524          
    525            /********´òÓ¡³ö´®¿Ú½ÓÊÕµ½µÄÊý¾Ý£¬ÓÃÓÚÌáÊ¾*********/
    526          
    527            for(i=1;i<=len;i++)
   \   000017   7E01         MOV     R6,#0x1
   \   000019   8012         SJMP    ??SampleApp_SerialCMD_0
    528            HalUARTWrite(0,str+i,1 ); 
   \                     ??SampleApp_SerialCMD_1:
   \   00001B                ; Setup parameters for call to function HalUARTWrite
   \   00001B   8E..         MOV     ?V0 + 4,R6
   \   00001D   E5..         MOV     A,?V0 + 2
   \   00001F   25..         ADD     A,?V0 + 4
   \   000021   FA           MOV     R2,A
   \   000022   E5..         MOV     A,?V0 + 3
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   ??HalUARTWrite?relay
   \   00002C   0E           INC     R6
   \                     ??SampleApp_SerialCMD_0:
   \   00002D   E5..         MOV     A,?V0 + 0
   \   00002F   C3           CLR     C
   \   000030   9E           SUBB    A,R6
   \   000031   7C01         MOV     R4,#0x1
   \   000033   7D00         MOV     R5,#0x0
   \   000035   50E4         JNC     ??SampleApp_SerialCMD_1
    529            HalUARTWrite(0,"\n",1 );//»»ÐÐ  
   \   000037                ; Setup parameters for call to function HalUARTWrite
   \   000037   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000039   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   12....       LCALL   ??HalUARTWrite?relay
    530            
    531            if(*(str+1)=='1')
   \   000040   85..82       MOV     DPL,?V0 + 2
   \   000043   85..83       MOV     DPH,?V0 + 3
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6431         XRL     A,#0x31
   \   00004A   7030         JNZ     ??SampleApp_SerialCMD_2
    532            {
    533              Point_to_Point.addr.shortAddr = Adress[0];
   \   00004C   90....       MOV     DPTR,#Adress
   \   00004F   12....       LCALL   ?Subroutine1 & 0xFFFF
    534              if ( AF_DataRequest( &Point_to_Point, &SampleApp_epDesc,
    535          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    536          	                    len+1,                  // Êý¾Ý³¤¶È         
    537                                      str,                     //Êý¾ÝÄÚÈÝ
    538          	                    &SampleApp_TransID, 
    539          	                    AF_DISCV_ROUTE,
    540          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    541              {
    542              }
    543              else
    544              {
    545                // Error occurred in request to send.
    546              } 
    547            }
   \                     ??CrossCallReturnLabel_0:
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   75....       MOV     ?V0 + 4,#SampleApp_TransID & 0xff
   \   000058   75....       MOV     ?V0 + 5,#(SampleApp_TransID >> 8) & 0xff
   \   00005B   78..         MOV     R0,#?V0 + 4
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   78..         MOV     R0,#?V0 + 2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   75..03       MOV     ?V0 + 4,#0x3
   \   00006E   75..00       MOV     ?V0 + 5,#0x0
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
    548            if(*(str+1)=='2')
   \                     ??SampleApp_SerialCMD_2:
   \   00007C   85..82       MOV     DPL,?V0 + 2
   \   00007F   85..83       MOV     DPH,?V0 + 3
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6432         XRL     A,#0x32
   \   000086   7030         JNZ     ??SampleApp_SerialCMD_3
    549            {
    550              Point_to_Point.addr.shortAddr = Adress[1];
   \   000088   90....       MOV     DPTR,#Adress + 2
   \   00008B   12....       LCALL   ?Subroutine1 & 0xFFFF
    551              if ( AF_DataRequest( &Point_to_Point, &SampleApp_epDesc,
    552          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    553          	                    len+1,                  // Êý¾Ý³¤¶È         
    554                                      str,                     //Êý¾ÝÄÚÈÝ
    555          	                    &SampleApp_TransID, 
    556          	                    AF_DISCV_ROUTE,
    557          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    558              {
    559              }
    560              else
    561              {
    562                // Error occurred in request to send.
    563              } 
    564            }
   \                     ??CrossCallReturnLabel_1:
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000091   75....       MOV     ?V0 + 4,#SampleApp_TransID & 0xff
   \   000094   75....       MOV     ?V0 + 5,#(SampleApp_TransID >> 8) & 0xff
   \   000097   78..         MOV     R0,#?V0 + 4
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   78..         MOV     R0,#?V0 + 2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   75..03       MOV     ?V0 + 4,#0x3
   \   0000AA   75..00       MOV     ?V0 + 5,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 4
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
    565            if(*(str+1)=='3')
   \                     ??SampleApp_SerialCMD_3:
   \   0000B8   85..82       MOV     DPL,?V0 + 2
   \   0000BB   85..83       MOV     DPH,?V0 + 3
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6433         XRL     A,#0x33
   \   0000C2   703A         JNZ     ??SampleApp_SerialCMD_4
    566            {
    567              Point_to_Point.addr.shortAddr = Adress[2];
   \   0000C4   90....       MOV     DPTR,#Adress + 4
   \   0000C7   12....       LCALL   ?Subroutine1 & 0xFFFF
    568              if ( AF_DataRequest( &Point_to_Point, &SampleApp_epDesc,
    569          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    570          	                    len+1,                  // Êý¾Ý³¤¶È         
    571                                      str,                     //Êý¾ÝÄÚÈÝ
    572          	                    &SampleApp_TransID, 
    573          	                    AF_DISCV_ROUTE,
    574          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    575              {
    576              }
    577              else
    578              {
    579                // Error occurred in request to send.
    580              } 
    581            }
   \                     ??CrossCallReturnLabel_2:
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CD   75....       MOV     ?V0 + 4,#SampleApp_TransID & 0xff
   \   0000D0   75....       MOV     ?V0 + 5,#(SampleApp_TransID >> 8) & 0xff
   \   0000D3   78..         MOV     R0,#?V0 + 4
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   78..         MOV     R0,#?V0 + 2
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   E5..         MOV     A,?V0 + 0
   \   0000DF   2401         ADD     A,#0x1
   \   0000E1   F5..         MOV     ?V0 + 0,A
   \   0000E3   E4           CLR     A
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   F5..         MOV     ?V0 + 1,A
   \   0000E8   78..         MOV     R0,#?V0 + 0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   75..03       MOV     ?V0 + 0,#0x3
   \   0000F0   75..00       MOV     ?V0 + 1,#0x0
   \   0000F3   78..         MOV     R0,#?V0 + 0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
    582          
    583            /*******·¢ËÍ³öÈ¥***²Î¿¼Íø·ä 1Ð¡Ê±ÎÞÏßÊý¾Ý´«Êä½Ì³Ì*********/
    584          /*
    585            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    586          	                    SAMPLEAPP_COM_CLUSTERID,//×Ô¼º¶¨ÒåÒ»¸ö
    587          	                    len+1,                  // Êý¾Ý³¤¶È         
    588                                      str,                     //Êý¾ÝÄÚÈÝ
    589          	                    &SampleApp_TransID, 
    590          	                    AF_DISCV_ROUTE,
    591          	                    AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    592          	                     {
    593          	                     }
    594            else
    595            {
    596            // Error occurred in request to send.
    597            } 
    598          */
    599          }
   \                     ??SampleApp_SerialCMD_4:
   \   0000FE   7F06         MOV     R7,#0x6
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 0
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   2401         ADD     A,#0x1
   \   000007   F5..         MOV     ?V0 + 4,A
   \   000009   E4           CLR     A
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F5..         MOV     ?V0 + 5,A
   \   00000E   78..         MOV     R0,#?V0 + 4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#Point_to_Point
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D                ; Setup parameters for call to function AF_DataRequest
   \   00000D                ; Setup parameters for call to function AF_DataRequest
   \   00000D                ; Setup parameters for call to function AF_DataRequest
   \   00000D   75..1E       MOV     ?V0 + 1,#0x1e
   \   000010   78..         MOV     R0,#?V0 + 1
   \   000012   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
       -> LED_Initial                   0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
       -> HalUARTWrite                  0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_SerialCMD           0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     31
       -> AF_DataRequest                0      0     38
     SampleApp_SerialCMD                0      0     35
       -> HalUARTWrite                  0      0     28
       -> HalUARTWrite                  0      0     28
       -> AF_DataRequest                0      0     46
       -> AF_DataRequest                0      0     46
       -> AF_DataRequest                0      0     46


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     SampleApp_ClusterList                   12
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     Point_to_Point                          12
     Adress                                   6
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     SampleApp_Init                         192
     SampleApp_ProcessEvent                 196
     SampleApp_HandleKeys                    61
     ??Subroutine8_0                          5
     SampleApp_MessageMSGCB                 155
     ?Subroutine4                             8
     ??Subroutine9_0                          8
     ?Subroutine3                             4
     ?Subroutine7                            12
     ?Subroutine2                            12
     ?Subroutine0                             3
     SampleApp_SendPeriodicMessage           67
     ??Subroutine10_0                         6
     SampleApp_SendFlashMessage             116
     ?Subroutine5                            10
     SampleApp_SerialCMD                    259
     ?Subroutine6                            17
     ?Subroutine1                            19
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ??SampleApp_SerialCMD?relay              6
     ?<Constant "Hello World\n">             13
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "\n">                         2

 
 1 150 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    57 bytes in segment XDATA_ROM_C
    71 bytes in segment XDATA_Z
 
 1 192 bytes of CODE  memory
    57 bytes of CONST memory
    71 bytes of XDATA memory

Errors: none
Warnings: 1
